<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>flatig-我的个人博客站</title>
    <link>https://flatig.vip/</link>
    <description>flatig&#39;s blog: 我的个人博客站</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>chineseliujiayi691@gmail.com (flatig)</managingEditor>
      <webMaster>chineseliujiayi691@gmail.com (flatig)</webMaster><lastBuildDate>Sat, 14 Oct 2023 10:42:01 &#43;0800</lastBuildDate>
      <atom:link href="https://flatig.vip/index.xml" rel="self" type="application/rss+xml" />
    <item>
  <title>New_hugo</title>
  <link>https://flatig.vip/posts/new_hugo/</link>
  <pubDate>Sat, 14 Oct 2023 10:42:01 &#43;0800</pubDate>
  <author>flatig</author>
  <guid>https://flatig.vip/posts/new_hugo/</guid>
  <description><![CDATA[<h2 id="new-blog">new blog!</h2>
<p>将博客从 <code>Hexo</code> 迁移到 <code>Hugo</code> 啦！</p>
<p>来看看有什么不同吧！</p>]]></description>
</item>
<item>
  <title>详解闭包:Rust中的函数式编程</title>
  <link>https://flatig.vip/posts/%E8%AF%A6%E8%A7%A3%E9%97%AD%E5%8C%85-rust%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
  <pubDate>Sun, 02 Apr 2023 21:05:39 &#43;0000</pubDate>
  <author>flatig</author>
  <guid>https://flatig.vip/posts/%E8%AF%A6%E8%A7%A3%E9%97%AD%E5%8C%85-rust%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
  <description><![CDATA[<p>全文长度：2300词
阅读时长：约15分钟</p>
<p>本节参考：</p>
<ul>
<li><a href="https://course.rs/advance/functional-programing/closure.html"target="_blank" rel="external nofollow noopener noreferrer">Rust语言圣经<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://rustwiki.org/zh-CN/reference/expressions/closure-expr.html"target="_blank" rel="external nofollow noopener noreferrer">RF-闭包表达式<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://rustwiki.org/zh-CN/reference/types/closure.html"target="_blank" rel="external nofollow noopener noreferrer">RF-闭包类型<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li><a href="https://zhuanlan.zhihu.com/p/341815515"target="_blank" rel="external nofollow noopener noreferrer">Rust中的闭包与关键字Move<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
</ul>
<p>Rust中函数式编程的大梁由四大天王顶起：</p>
<ul>
<li>模式匹配</li>
<li>枚举</li>
<li>迭代器</li>
<li>闭包</li>
</ul>
<p>使用 <strong>闭包（Closure）</strong> 可以做到将一系列语句和表达式赋值给变量，因此也可以将语句和表达式作为参数传递，将语句和表达式作为函数返回值返回，它具有如此一系列神奇的特性。闭包的使用很简单，但其中一些细节需要仔细推敲。
下面，我们从闭包如何捕获环境，闭包如何使用捕获值，以及闭包实现的角度，来介绍这个编程利器。</p>
<h2 id="开始捕获环境">开始——捕获环境</h2>
<hr>
<p>Rust中的函数是无法捕获其所在环境的。对于以下代码：</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">let</span><span class="w"> </span><span class="n">num</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;</span><span class="si">{num}</span><span class="s">&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">fn</span> <span class="nf">func</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;</span><span class="si">{num}</span><span class="s">&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>即使该函数定义在 <code>main()</code> 内部，它仍然无法访问到自己被定义的环境中定义的变量。若要访问这些变量，只能通过传递函数参数的方式。需要注意，<code>static</code> 和 <code>const</code> 这样的量具有静态生命周期，是可以访问的。
而使用闭包，便可以起到捕获环境的作用。
那么如何定义一个闭包呢？Rust中通过闭包表达式定义一个闭包类型，在其他语言中也称为 <strong>lambda表达式</strong>。</p>
<p>闭包表达式的<strong>句法规则</strong>是：可选的 <code>move</code> ，后跟由 <code>||</code> 围住的参数模式列表（可以省略类型标注），后跟可选的返回值标注 <code>-&gt; type</code> ，后跟一个块表达式（无返回值标注时，若块内只有一个表达式则可以直接写在 <code>||</code> 后）。例如：</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// 函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="k">fn</span> <span class="nf">func</span><span class="p">(</span><span class="n">a</span>: <span class="kt">i32</span><span class="p">,</span><span class="w"> </span><span class="n">b</span>: <span class="kt">i32</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">i32</span> <span class="p">{</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">a</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">b</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 闭包定义1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">func</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">|</span><span class="n">a</span>: <span class="kt">i32</span><span class="p">,</span><span class="w"> </span><span class="n">b</span>: <span class="kt">i32</span><span class="o">|</span><span class="w"> </span>-&gt; <span class="kt">i32</span> <span class="p">{</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">a</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">b</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 闭包定义2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">func</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">a</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">b</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">};</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 闭包定义3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">func</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="o">|</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">b</span><span class="p">;</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 闭包定义4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">func</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">move</span><span class="w"> </span><span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="o">|</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">b</span><span class="p">;</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 相同的调用方式 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">func</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">);</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">res</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">);</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="闭包捕获环境的方式">闭包捕获环境的方式</h2>
<hr>
<p>闭包是可以捕获环境的，捕获的方式有这几种（不捕获环境的闭包见后文）：</p>
<ul>
<li>不可变引用 <code>&amp;T</code></li>
<li>可变引用 <code>&amp;mut T</code></li>
<li>移动语义（获取所有权） <code>T</code>
当在 <code>||</code> 前使用 <code>move</code> 时，将强制闭包以移动语义（move）捕获值，获取值的所有权。对于实现了 <code>Copy Trait</code> 的类型，则使用 <code>Copy</code> <strong>复制语义</strong>。当没有使用 <code>move</code> 时，编译器会按照如下顺序进行检查，选择捕获方式，直到遇到第一个能通过编译的选项：</li>
</ul>
<ol>
<li>不可变引用</li>
<li>唯一不可变引用</li>
<li>可变引用</li>
<li>移动语义
此处，<strong>唯一不可变引用</strong> 是基于借用规则而出现的一种特殊的捕获方式。对于下述代码：</li>
</ol>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">a</span><span class="p">;</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">{</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">*</span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="p">};</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// 下行代码不正确  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="c1">// let y = &amp;b;  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">x</span><span class="p">();</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;</span><span class="si">{y}</span><span class="s">&#34;</span><span class="p">);</span><span class="w">   </span><span class="c1">// 由于NLL，这里需要使用 y
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">let</span><span class="w"> </span><span class="n">z</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">b</span><span class="p">;</span></span></span></code></pre></td></tr></table>
</div>
</div><p>代码中 <code>b</code> 是对 <code>a</code> 的可变借用，因此可以通过解引用 <code>b</code> 来修改 <code>a</code> 的值。但在这里我们将修改的操作放在一个闭包中，其中使用了 <code>b</code>，因此闭包需要捕获它。由于 <code>b</code> 本身不是 <code>mut</code> 的，因此无法以可变引用的形式捕获。但若以不可变引用的形式捕获，那么就会获得对可变引用的引用 <code>&amp; &amp;mut</code>，它将不是唯一的，这违反了借用规则。
这时，闭包便使用<strong>唯一不可变引用</strong>的方式来捕获变量，即它会对 <code>b</code> 进行不可变引用，同时会确保对 <code>b</code> 的引用只有一个。</p>
<h2 id="3种闭包trait">3种闭包Trait</h2>
<hr>
<p>这里需要做一区别，闭包<strong>如何捕获环境</strong>，和闭包<strong>如何使用捕获到的值</strong>，两者是不同的。</p>
<p>Rust编译器会根据闭包 <strong>如何使用</strong> 捕获到的值，来决定为闭包实现哪些<strong>闭包Trait</strong>。
或者说，编译器通过这3种Trait来描述和分类不同的闭包：</p>
<ul>
<li><code>FnOnce</code> ：闭包可能会消耗掉捕获值的所有权，表示闭包至少能使用一次，因此所有的闭包均实现了该Trait。</li>
<li><code>FnMut</code> ：闭包不会消耗掉捕获值的所有权，同时会对捕获值进行修改。</li>
<li><code>Fn</code> ：闭包不会消耗掉捕获值的所有权，同时不会对捕获值进行修改。
所有闭包都 <strong>至少</strong> 实现了 <code>FnOnce</code>。</li>
</ul>
<p>所有类型的闭包中，有些闭包可能会消耗掉捕获值的所有权，这种闭包在调用一次后无法再次调用（要处理的值已经不见了），因此对于所有的闭包来说，闭包最少是可以使用一次的，使用 <code>FnOnce</code> 描述。如果闭包并不消耗掉捕获值的所有权，便可以多次被调用，它对捕获值的操作，只可能是修改或者不修改，前者使用 <code>FnMut</code> 描述，后者使用 <code>Fn</code> 描述。</p>
<p>因此可以说， <strong>3种闭包Trait，是在闭包如何使用捕获值的角度上，对闭包的分类。</strong></p>
<p>现在观察这3种Trait的定义签名（简化）：</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">pub</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="nb">Fn</span><span class="o">&lt;</span><span class="n">Args</span><span class="o">&gt;</span><span class="w"> </span>: <span class="nb">FnMut</span><span class="o">&lt;</span><span class="n">Args</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">extern</span><span class="w"> </span><span class="s">&#34;rust-call&#34;</span><span class="w"> </span><span class="k">fn</span> <span class="nf">call</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">args</span>: <span class="nc">Args</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span>::<span class="n">Output</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="nb">FnMut</span><span class="o">&lt;</span><span class="n">Args</span><span class="o">&gt;</span><span class="w"> </span>: <span class="nb">FnOnce</span><span class="o">&lt;</span><span class="n">Args</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">extern</span><span class="w"> </span><span class="s">&#34;rust-call&#34;</span><span class="w"> </span><span class="k">fn</span> <span class="nf">call_mut</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">args</span>: <span class="nc">Args</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span>::<span class="n">Output</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="nb">FnOnce</span><span class="o">&lt;</span><span class="n">Args</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">type</span> <span class="nc">Output</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">extern</span><span class="w"> </span><span class="s">&#34;rust-call&#34;</span><span class="w"> </span><span class="k">fn</span> <span class="nf">call_once</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">args</span>: <span class="nc">Args</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Self</span>::<span class="n">Output</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到，实现 <code>FnMut</code> 的条件是，已经实现了 <code>FnOnce</code>，而实现 <code>Fn</code> 的条件是已经实现了 <code>FnMut</code>，因此，闭包对这3种Trait的实现有这三种情况：</p>
<ol>
<li>只实现了 <code>FnOnce</code></li>
<li>实现了 <code>FnOnce</code> 和 <code>FnMut</code></li>
<li>实现了 <code>FnOnce</code> ，<code>FnMut</code> 和 <code>Fn</code>
分别对应上述三种Trait的情况。</li>
</ol>
<h2 id="函数式编程作为参数和返回值">函数式编程：作为参数和返回值</h2>
<hr>
<p>由于Rust中的闭包实现了上文介绍的几种闭包特征，因此可以使用特征约束的方法让闭包作为函数参数或返回值来使用，例如：</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// 接收一个 FnOnce() 类型的闭包并调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fn</span> <span class="nf">function</span><span class="o">&lt;</span><span class="n">F</span><span class="o">&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">f</span>: <span class="nc">F</span><span class="p">)</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">F</span>: <span class="nb">FnOnce</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">f</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// 返回一个 FnOnce() -&gt; &amp;&#39;static str 类型的闭包
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fn</span> <span class="nf">some_func</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nc">impl</span><span class="w"> </span><span class="nb">FnOnce</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="kp">&amp;</span><span class="nb">&#39;static</span> <span class="kt">str</span> <span class="p">{</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s">&#34;666&#34;</span><span class="w"> </span><span class="p">}</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// 返回一个特征对象，不常用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fn</span> <span class="nf">dyn_func</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nb">Box</span><span class="o">&lt;</span><span class="k">dyn</span><span class="w"> </span><span class="nb">FnOnce</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="kp">&amp;</span><span class="nb">&#39;static</span> <span class="kt">str</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nb">Box</span>::<span class="n">new</span><span class="p">(</span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s">&#34;999&#34;</span><span class="w"> </span><span class="p">})</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>对于函数而言，只要符合特征约束，也可以作为其他函数的参数：</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="c1">// 将要接收函数和闭包作为参数的函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fn</span> <span class="nf">call_me</span><span class="o">&lt;</span><span class="n">F</span>: <span class="nb">Fn</span><span class="p">()</span><span class="o">&gt;</span><span class="p">(</span><span class="n">f</span>: <span class="nc">F</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">f</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// 一个函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">fn</span> <span class="nf">function</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;I&#39;m a function!&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="c1">// 一个闭包
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">closure</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;I&#39;m a closure!&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">call_me</span><span class="p">(</span><span class="n">closure</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">call_me</span><span class="p">(</span><span class="n">function</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="闭包的实际类型">闭包的实际类型</h2>
<hr>
<p>当使用闭包表达式定义一个闭包时，编译器会隐式生成一个匿名结构体，结构体中的字段会存储闭包捕获的变量。同时，会为该结构体实现闭包特征，并由此实现闭包的函数功能。
例如，对于以下闭包：</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">fn</span> <span class="nf">closure</span><span class="o">&lt;</span><span class="n">F</span><span class="o">&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">f</span>: <span class="nc">F</span><span class="p">)</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="n">F</span>: <span class="nb">FnOnce</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="kp">&amp;</span><span class="nb">&#39;static</span> <span class="kt">str</span>  
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;closure: </span><span class="si">{}</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">f</span><span class="p">());</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s">&#34;Hello&#34;</span><span class="w"> </span><span class="p">};</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">closure</span><span class="p">(</span><span class="n">s</span><span class="p">);</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>编译器会大致生成如下的代码：</p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">ClosureSome</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">a</span>: <span class="kp">&amp;</span><span class="nb">&#39;static</span> <span class="kt">str</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="nb">FnOnce</span><span class="p">()</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">ClosureSome</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">type</span> <span class="nc">Output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="nb">&#39;static</span><span class="w"> </span><span class="kt">str</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">fn</span> <span class="nf">call_once</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kp">&amp;</span><span class="nb">&#39;static</span> <span class="kt">str</span> <span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="s">&#34;Hello&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>因此每个闭包都具有自己独特的类型，且无法被写出。
由此可以看出，当传递一个闭包时，<strong>传递的实际上是一个结构体</strong>，而调用一个闭包时，则是调用相应Trait定义的方法。</p>
<p>上文中介绍了编译器根据闭包如何使用捕获到的值而实现不同的闭包特征，而对于 <strong>闭包没有捕获值</strong> 的情况，该闭包可以被 <strong>自动强转</strong> 为函数指针：</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">let</span><span class="w"> </span><span class="n">add</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">|</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">|</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">y</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">add</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">type</span> <span class="nc">Binop</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">fn</span><span class="p">(</span><span class="kt">i32</span><span class="p">,</span><span class="w"> </span><span class="kt">i32</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="kt">i32</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">let</span><span class="w"> </span><span class="n">bo</span>: <span class="nc">Binop</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">add</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bo</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结">总结</h2>
<hr>
<p>Rust中的闭包可以实现一些函数式编程的功能，它与函数类似，但也不同，主要便在于<strong>闭包可以捕获环境</strong>。</p>
<p>闭包 <strong>捕获环境</strong> 的方式分为三种，即 <code>&amp;T</code> <code>&amp;mut T</code> 和 <code>T</code>，当闭包不捕获环境时，可以被自动强转为函数指针。
闭包 <strong>使用捕获值</strong> 的方式也分为三种，即消耗所有权，不消耗所有权并进行修改，不消耗所有权且不修改。与此对应的，有三种闭包特征，即 <code>FnOnce</code>， <code>FnMut</code> 和 <code>Fn</code>，实现了后一个特征则肯定实现了前一个特征，如一个闭包实现了 <code>Fn</code>，它肯定实现了 <code>FnMut</code> 和 <code>FnOnce</code>。</p>
<p>通过使用特征约束，利用3种Trait，可以将闭包作为参数传递，或作为返回值返回。
最后，闭包实现这样一系列功能，它的真实类型便是一个编译器自动生成的匿名结构体，结构体的字段存储着闭包捕获的环境，编译器为它实现相应的Trait，并将闭包包含的语句和表达式作为具体的实现。</p>
]]></description>
</item>
<item>
  <title>FLTK-rs教程中文改进版已发布</title>
  <link>https://flatig.vip/posts/fltk-rs%E6%95%99%E7%A8%8B%E4%B8%AD%E6%96%87%E6%94%B9%E8%BF%9B%E7%89%88%E5%B7%B2%E5%8F%91%E5%B8%83/</link>
  <pubDate>Thu, 09 Mar 2023 19:43:54 &#43;0000</pubDate>
  <author>flatig</author>
  <guid>https://flatig.vip/posts/fltk-rs%E6%95%99%E7%A8%8B%E4%B8%AD%E6%96%87%E6%94%B9%E8%BF%9B%E7%89%88%E5%B7%B2%E5%8F%91%E5%B8%83/</guid>
  <description><![CDATA[<p>在把DNS从Dnspod迁移到Cloudflare（似乎解析GitHub Pages速度更快）后，看了一下之前做的FLTK-rs Book中文翻译，然后发现，实在是。。。。。</p>
<p>只能用句号表达我的感觉了，于是这次在个人使用FLTK-rs的基础上重新做了一下翻译，改进了原翻译中的错误和不足，增添了一些新的东西，同时把在线书本地址解析为 <a href="fltk.flatig.vip">fltk.flatig.vip</a>。</p>
<p>现在大家可以放心地阅读这本 <strong>FLTK-rs中文教程</strong> 了：</p>
<p><a href="fltk.flatig.vip">fltk.flatig.vip</a></p>
<p>PDF 下载地址:
<a href="https://github.com/Flatigers/fltk-book-zh/releases/download/23%2F03%2F09/fltk.book.pdf"target="_blank" rel="external nofollow noopener noreferrer">Release<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
]]></description>
</item>
<item>
  <title>冬至</title>
  <link>https://flatig.vip/posts/%E5%86%AC%E8%87%B3/</link>
  <pubDate>Tue, 08 Nov 2022 00:02:00 &#43;0000</pubDate>
  <author>flatig</author>
  <guid>https://flatig.vip/posts/%E5%86%AC%E8%87%B3/</guid>
  <description><![CDATA[<h2 id="冬至一">冬至（一）</h2>
<p>三十岁的小伙儿老赵猛一下从床上起来。</p>
<p>顾不上擦汗，如同一只跳起的青蛙快速爬到窗边，用力掀开那扇窗户。总算是觉得畅快了。</p>
<p>他呼了几口气，看到从嘴里出来的气体变成了水雾，抖了抖身子细细感受后，才觉得这天越来越冷。这口雾从幽暗的嘴里呼出，慢慢升入不太蓝的天空，发光的太阳像被罩着灰布，时隐时现。他觉得与其说是天冷，倒不如说是心冷了，从里到外的冷冽才会让人这么难受，不然也不至于这几层棉睡衣也熬不住。</p>
<p>也顾不上想那个噩梦，只是尽快换上衣服。时间不早了，平日里这时候，他已经在去上班的地铁上，跟其他赶工干活的人拥挤在一起，从一个不痛快的地方到另一个不痛快的地方。</p>
<p>正要出门时，媳妇呵了他一声：要干撒去！</p>
<p>只一愣，她立马把手机贴到老赵的脸上。细细一看，便觉得从胸腔里传出的那种冷冽更要害了。</p>
<p>该死的！怎么连这鬼地方都要封。</p>
<p>还没睡足的老赵把早餐，上班，服务，挣钱之类的字眼统统从脑子里揪出来，只扒掉了一层衣服就又钻进被窝。他很想这样一睡就不再起来了。</p>
<p>然而偏偏这时候，就有刺耳的响动试图拽他下来。他细听，这声音从墙的外边来，穿透半米厚的钢筋混凝土，直冲冲地戳中他的脑仁，一会儿从左边响，一会儿从右边响，忽左忽右，忽远忽近。要不是声音连贯响起，他可能会以为这是一个人把自己撕成各两半，从两边连起来折磨他。</p>
<p>刚要抱怨，这声音突然清晰了，“做何酸了，快出来做何酸，赶紧出来做何酸！”（这里并不是老赵不懂这两个音对应的什么字，只是因为这样他就可以把人和事儿一起骂个遍了）。于是老赵开始使劲地抱怨，“这急着就来赶驴上架，做，赶紧做，我老赵早晚有一天要给你这坏怂做一百次核酸！”</p>
<p>老赵跟媳妇一起从床上掉下来，穿上两种不同的衣服，染上两种不同的烦躁，戴上两个一样的口罩，走过同一扇破败的门。</p>
<p>在路上的时候，他想着，也许还不算烂吧，一辈子说不定就这样过去了。灵魂被牵引着从无尽黑夜来，又到无尽黑夜去，北方的来风给他着上一层外衣&hellip;&hellip;</p>
<p>老赵正要诗兴大发，前面的大白让他张开嘴巴，他张开嘴啊啊地叫喊，被捅得却越来越用力。于是他跟着棉签的动向摇头晃脑。</p>
<p>他感觉自己的嗓子像是嘶吼了几个钟头，脑子也有点晕乎乎的。路上有人对着自己窃窃私语，“你看这老赵的头，摇来摇去，好像个疯的”。于是老赵摇头晃脑地回话：亏你达！</p>
<p>媳妇在旁边掐他一把，瓜怂，脸丢没了。老赵赶紧抓住媳妇的手往回走。</p>
<p>回去以后，老赵摇了一天的头。</p>
<p>##（二）</p>
<p>某天之后，老赵一直蹲在家，不能出去，也不想出去。</p>
<p>平日里，他总是向旁人抱怨，这觉是怎么也睡不够。如果上天给他时间，一定要趴在被子里拉展，睡得昏天黑地，一直睡到肚子里全是空的，饿得不行再醒过来往里填充。现在时间已经足够，而且足得很富裕，可老赵只睡了一天，就已经不愿想这睡觉的事情了。</p>
<p>今天，他还是跟之前一样呆呆站在窗前。这个楼层看不见什么，隐约中有一道分界线，把面前茫茫的一片白分成两半，顶上的有些像透着塑料袋看的大海，下面则乱七八糟，混沌得就像铁锅里炖猪蹄。这个年纪不算老，或者说老赵正值壮年，大部分人也许能知道他正想着什么，这样的想法正出自很多青年口中。老赵也很清楚自己想的，无非是迷茫，道路，人生之类的话。可他怎么突然就觉得，自己已经是个老头了呢，莫非是老赵这个称呼喊多了？</p>
<p>他需要出去一趟了。家里囤的食物已经不太多，剩下的撑着也能过个一两天，可谁知道什么时候才让自己出去呢？听说昨天又有几个得病的。</p>
<p>他已经算好了时间，去做何酸的时间大概在下午两点，自己中午一点出去，买完东西直接去做，大约两点半就可以到家了——超市离家很近，本来打算一点半去的，为了时间宽裕，他打算早点去。</p>
<p>老赵十二点半就出门了。无他，吃完饭闲着没事儿干，想着在可以趁这个机会好好溜达溜达。或许逃出那个方块似的房子，他脑子里的想法也会跟着拨云见日。</p>
<p>超市门口排着队，好在排队的人不多，看长度也只有十米。老赵站进了队伍发呆。不一会儿，他就发现这队伍的前进速度实在很慢，脑子里已经放了两遍没有意义的歌曲，可他还在原地。莫非有人插队？迈出一步探头看去，他们都紧紧贴着前面的人，整齐地低着头，如果仔细看去倒也不算整齐，低的角度还不太一样。老赵忽然呛了一口，好像面前点了一圈干柴要知道这还是隔着口罩。他抬头看去，原来是前面的大高个儿在猛抽烟。高个儿的一只耳朵上戴了一整个口罩，手指撮着烟头，比银行家数钱还要抖擞，烟雾就从两个鼻孔和一张嘴里喷薄而出。还有两只耳朵，甚至眼睛里也冒出了烟雾。</p>
<p>他心想，高个儿或许正在挣扎，同自己一样，于是也就紧了紧口罩，不再去管。无聊之中拿出了手机，翻看了一些无聊的文章和视频，时间也就在这之中消磨了。突然，他被人往前顶了一步，总算是进去两个人。老赵打开备忘录，打算看看自己准备的购物清单，但手机却卡住了，屏幕不再变化。他使劲播弄了几下，原来是电话打进来了。刚接上，一声怒吼就从话筒里喷出来，就像是岩浆要钻进他的耳朵：烂怂老赵等你半天，赶紧回来做何酸！</p>
<p>竟然已经两点了。老赵看着自己在排的队，前面的人还是那么的多，回头看去，自己后面已经跟了好几十人。不，在老赵眼中有几百人几千人。他有些头晕，自己的视线被猛然拉长数倍，他看到前面的人离自己越来越远，于是赶忙向前一冲。忽然前面的人又很快地靠近自己，像一块陨石正要砸在自己的面门，于是又响后一退。老赵在恍恍惚惚中滚出了队伍。拍了一下额头，仔细一看，这哪是什么队伍，分明是一条正在蠕动的长虫！</p>
<p>他赶着小跑，仓皇逃到楼下，看到居民正在排队，立马扎了进去。老赵听到楼上又有人在喊：做何酸了，快出来做何酸，赶紧出来做何酸！这时前面拿喇叭的居委会某委员也跟着喝起来：间距一米赶紧站开，快快快！老赵不敢懈怠，立马照做。他又跟着队伍走，到了最终要做的地方。这时前面拿喇叭的大白喊起来：麻烦大家，间距一米站开&hellip;&hellip;</p>
<p>老赵心里嘀咕，之前不是站过了吗？他也不想麻烦别人，立马照做，朝后直退了半条大街，整个队伍才站成一米的间隔。</p>
<p>回家之后，老赵又摇了一整天。</p>
]]></description>
</item>
<item>
  <title>使用Rust编写快速、轻简的GUI程序：fltk-rs crate</title>
  <link>https://flatig.vip/posts/%E4%BD%BF%E7%94%A8rust%E7%BC%96%E5%86%99%E5%BF%AB%E9%80%9F%E8%BD%BB%E7%AE%80%E7%9A%84gui%E7%A8%8B%E5%BA%8Ffltk-rs-crate/</link>
  <pubDate>Sun, 16 Oct 2022 23:51:12 &#43;0000</pubDate>
  <author>flatig</author>
  <guid>https://flatig.vip/posts/%E4%BD%BF%E7%94%A8rust%E7%BC%96%E5%86%99%E5%BF%AB%E9%80%9F%E8%BD%BB%E7%AE%80%E7%9A%84gui%E7%A8%8B%E5%BA%8Ffltk-rs-crate/</guid>
  <description><![CDATA[<p>全文字数：3198词</p>
<p>阅读时长：大约5分钟（不包括所有代码）</p>
<h2 id="使用rust编写快速轻简的gui程序fltk-rs-crate">使用Rust编写快速、轻简的GUI程序：fltk-rs crate</h2>
<p>这是一篇推荐你使用Rust的文章&hellip;&hellip;</p>
<p>“Rust，一门<strong>赋</strong>予每个人构建可靠且高效软件<strong>能</strong>力的语言。”</p>
<p>截至2021年，在Stack Overflow的年度 <a href="https://insights.stackoverflow.com/survey/2021#most-popular-technologies-language"target="_blank" rel="external nofollow noopener noreferrer">Overview <i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>上，<strong>Rust</strong> 已经<strong>连续六年</strong>成为最受开发者喜欢的编程语言！</p>
<p><a class="lightgallery" href="https://pic1.imgdb.cn/item/634c136d16f2c2beb1b5df44.png" data-thumbnail="https://pic1.imgdb.cn/item/634c136d16f2c2beb1b5df44.png" data-sub-html="<h2>Stack Overflow 2021 Overview</h2>"></a></p>
<p>Rust作为一门具有零开销抽象的系统编程语言，具有以生命周期和所有权借用的内存安全机制，使代码只要通过编译就没有内存安全问题。再加上rust具有极其活跃友好的社区，丰富的crate库，完备且大部分免费的参考资料，这让世界上的多数开发者喜欢上这门语言！正如Rust官网的介绍所说，作为一门编程语言，其最大特点在于“<strong>赋能</strong>”！</p>
<p>在学习编程语言时，尤其是在学习Rust这种学习曲线 <strong>极其陡峭</strong>（可能是目前最难学的）的语言时，保持自己对学习的兴趣很重要。而有什么能比编写出能看得到界面的程序<strong>更简单</strong>、能让人激动的呢？</p>
<p><a class="lightgallery" href="https://pic1.imgdb.cn/item/634c19e216f2c2beb1c1dbdc.png" data-thumbnail="https://pic1.imgdb.cn/item/634c19e216f2c2beb1c1dbdc.png" data-sub-html="<h2>https://pic1.imgdb.cn/item/634c19e216f2c2beb1c1dbdc.png</h2>"></a></p>
<p>于是，我利用业余时间将fltk-rs book翻译为中文（翻译水平不足，请大家谅解），方便大家学习fltk-rs，并使用Rust写出一个快速漂亮的程序！</p>
<p>由于国外网络有时不能访问，大家在公众号消息界面回复“<strong>fltk-rs</strong>”即可获得该电子书的中文和英文pdf文件，如果可以的话，请在GitHub上点个Star哦！</p>
<h2 id="fltk-for-rust">FLTK for Rust?</h2>
<p>在 Crates.io 上，Rust已经有很多跨平台的GUI框架可供使用了，比如 Iced，Frui，egui 等等。这里我们为什么要选择从FLTK开始学习呢？</p>
<p>最该放在前面的理由就是“<strong>简单</strong>”！</p>
<p>FLTK，全名 <strong>Fast Light Toolkit</strong>。而它正如它的名字一样，又小又快。FLTK库本身是使用 C++ 98开发的，fltk-rs则是使用Rust实现的，它通过FFI（Foreign Function Interface）调用一个FLTK封装器 <strong>cfltk</strong>（该库使用 C89 和 C++11编写），来达到使用rust编写fltk程序的目的。</p>
<p><strong>小知识：C++之父也在使用FLTK哦！</strong></p>
<p>现在说说我们使用fltk的好处：</p>
<ul>
<li>构造简单，对习惯使用<strong>面向对象</strong>GUI库的开发者及其友好</li>
<li>文档齐全，通过查阅文档可以解决几乎所有问题</li>
<li>又轻又快，编译出的文件很小（iced一个测试文件占用100M以上，fltk则不到1M），运行时占用内存小，且快速</li>
<li>跨平台，无需动态链接，这让你一次程序可以在Window，Linux，macOS甚至Android上运行（Android还是写原生比较好）</li>
<li>组件丰富，具有图像支持，开发方式丰富，开源协议宽松（MIT License）</li>
</ul>
<p>fltk也有些许缺点，比如对于复杂界面的编写没有很好的支持组件等等，但这些无伤大雅，对于入门rust GUI编写已经绰绰有余了。</p>
<p>下面，就让我们开始简单地学习下fltk-rs吧！</p>
<p>下面的内容可能有些<strong>草率</strong>，但这是让你看一下如何使用fltk-rs编写GUI程序。更全面地学习请参见fltk-rs官方文档和fltk-rs book。</p>
<h2 id="配置">配置</h2>
<p>首先，确保你配置了 g++，CMake，git和make（linux上），同时可能还要安装一些必须的库。关于库的安装个其他平台工具链的配置请参阅fltk-rs book的Setup配置章节。</p>
<p>将以下代码添加到你的 Cargo.toml 文件：</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">dependencies</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">fltk</span> <span class="p">=</span> <span class="p">{</span> <span class="nx">version</span> <span class="p">=</span> <span class="s2">&#34;^1.3&#34;</span><span class="p">,</span> <span class="nx">features</span> <span class="p">=</span> <span class="p">[</span><span class="s2">&#34;fltk-bundled&#34;</span><span class="p">]</span> <span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这基本上就可以了，Cargo会帮你下载和导入所有的库。</p>
<p>在这里我曾经踩到个坑，Cargo在下载库时可能会因为网络问题导致没有完全下载好所有需要的crate。但是，<strong>它不会再重新下载了</strong>，而且不会再给出提醒，这将导致一系列的<strong>链接错误</strong>！唯一的解决办法只有清楚cargo目录下缓存的crate文件，然后重新 <code>cargo build</code>下载，注意提示信息并保持网络通畅！</p>
<p>如果你也遇到了链接错误的问题，仔细想想<code>cargo build</code> 时有没有出错呢。</p>
<h2 id="创建一个app结构">创建一个APP结构</h2>
<p>fltk-rs crate在app模块中提供了一个App结构。初始化App结构可以初始化所有内部样式、字体和支持的图像类型。它还初始化了程序将要运行的多线程环境。</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">fltk</span>::<span class="o">*</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">app</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">app</span>::<span class="n">App</span>::<span class="n">default</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">app</span><span class="p">.</span><span class="n">run</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>run方法运行gui应用程序的事件循环（event loop）。 要对事件进行精细的控制，可以使用wait()方法：</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">fltk</span>::<span class="o">*</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">app</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">app</span>::<span class="n">App</span>::<span class="n">default</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="n">app</span><span class="p">.</span><span class="n">wait</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c1">// handle events
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>此外，App结构允许你使用with_scheme()初始器来设置程序的全局主题：</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">fltk</span>::<span class="o">*</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">app</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">app</span>::<span class="n">App</span>::<span class="n">default</span><span class="p">().</span><span class="n">with_scheme</span><span class="p">(</span><span class="n">app</span>::<span class="n">Scheme</span>::<span class="n">Gtk</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">app</span><span class="p">.</span><span class="n">run</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这将使你的程序具有Gtk程序的样子。还有其他的内置方案，Basic、Plastic和Gleam。</p>
<p>App结构还负责在应用程序开始时使用load_system_fonts()方法加载系统字体。</p>
<p>一个典型的fltk-rs应用程序，将在创建任何部件和显示主窗口之前构建App结构。</p>
<p>任何在run()方法调用后添加的逻辑，将在事件循环结束后执行（通常是关闭应用程序的所有窗口时，或者调用quit()方法时）。该逻辑可能包括在必要时重启程序的逻辑。</p>
<p>除了App结构外，App模块本身还包含与你的程序的全局状态有关的结构和自由函数。其中包括设置背景和前景颜色、默认字体和大小等视觉效果、屏幕功能、剪贴板功能、全局处理器、应用事件、通道（channels）（发送器和接收器）和超时。</p>
<h2 id="做出一个窗口">做出一个窗口</h2>
<p>FLTK会在它支持的系统平台上调用原生窗口，然后基本上通过自己的方法来绘制。它会在windows上调用HWND，在MacOS上调用NSWindow，在X11系统（linux, BSD）上调用XWindow。</p>
<p>使用这样的代码可以创建一个window：</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">fltk</span>::<span class="p">{</span><span class="n">prelude</span>::<span class="o">*</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">app</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">app</span>::<span class="n">App</span>::<span class="n">default</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">my_window</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">window</span>::<span class="n">Window</span>::<span class="n">new</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="mi">400</span><span class="p">,</span><span class="w"> </span><span class="mi">300</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;My Window&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">my_window</span><span class="p">.</span><span class="n">end</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">my_window</span><span class="p">.</span><span class="n">show</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">app</span><span class="p">.</span><span class="n">run</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>调用new()函数需要五个参数：</p>
<ul>
<li><code>x</code> 以电脑屏幕最左侧为原点的水平距离。</li>
<li><code>y</code> 以电脑屏幕最左侧为原点的垂直距离。</li>
<li><code>width</code> window的宽度。</li>
<li><code>height</code> window的高度。</li>
<li><code>title</code> window标题。</li>
</ul>
<p>接下来注意对end()的调用。window，以及其他类型的widget，实现了GroupExt trait。实现该trait的这些部件将 持有 任何在call()和end()间创建的widget（通过new()创建串口时，隐式调用了begin()），或者作为其父widget。 下一个调用show()唤起了window，使其出现在显示屏上。</p>
<h2 id="放几个组件">放几个组件</h2>
<p>FLTK提供了大约80个窗口组件。这些组件都实现了WidgetBase和WidgetExt的基本trait集。 我们已经遇到了我们的第一个组件，Window。 正如我们在Window widget中所看到的，小组件也可以根据其功能实现其他trait。 在我们之前写的例子中添加一个按钮：</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">fltk</span>::<span class="p">{</span><span class="n">prelude</span>::<span class="o">*</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">app</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">app</span>::<span class="n">App</span>::<span class="n">default</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">my_window</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">window</span>::<span class="n">Window</span>::<span class="n">new</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="mi">400</span><span class="p">,</span><span class="w"> </span><span class="mi">300</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;My Window&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">but</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">button</span>::<span class="n">Button</span>::<span class="n">new</span><span class="p">(</span><span class="mi">160</span><span class="p">,</span><span class="w"> </span><span class="mi">200</span><span class="p">,</span><span class="w"> </span><span class="mi">80</span><span class="p">,</span><span class="w"> </span><span class="mi">40</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Click me!&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">my_window</span><span class="p">.</span><span class="n">end</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">my_window</span><span class="p">.</span><span class="n">show</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">app</span><span class="p">.</span><span class="n">run</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>注意，这个按钮的父组件是my_window，因为它是在begin()和end()之间创建的。 另一种添加组件的方法是，使用实现了GroupExt trait的widget所提供的add(widget)方法。</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">fltk</span>::<span class="p">{</span><span class="n">prelude</span>::<span class="o">*</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">app</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">app</span>::<span class="n">App</span>::<span class="n">default</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">my_window</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">window</span>::<span class="n">Window</span>::<span class="n">new</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="mi">400</span><span class="p">,</span><span class="w"> </span><span class="mi">300</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;My Window&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">my_window</span><span class="p">.</span><span class="n">end</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">my_window</span><span class="p">.</span><span class="n">show</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">but</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">button</span>::<span class="n">Button</span>::<span class="n">new</span><span class="p">(</span><span class="mi">160</span><span class="p">,</span><span class="w"> </span><span class="mi">200</span><span class="p">,</span><span class="w"> </span><span class="mi">80</span><span class="p">,</span><span class="w"> </span><span class="mi">40</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Click me!&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">my_window</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">but</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">app</span><span class="p">.</span><span class="n">run</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>另一件要注意的事情是按钮的初始化，它的构造函数基本上与Window相同，这是因为它实现了WidgetBase trait。注意，虽然Window的x和y坐标是相对于屏幕的，但按钮的x和y坐标却是相对于包含按钮的窗口的。你可能已经注意到，这也适用于我们在前一页的嵌入式窗口。</p>
<p>下面我们来看几个其他的示例，具体编写方法和原理请参见官方文档或book！</p>
<h3 id="菜单和按钮的示例">菜单和按钮的示例</h3>
<p>这里我们使用闭包设置回调编写这个示例，实际上，fltk还可以允许你使用函数对象来处理回调，或者直接使用sender和message来编写。</p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">fltk</span>::<span class="p">{</span><span class="n">enums</span>::<span class="o">*</span><span class="p">,</span><span class="w"> </span><span class="n">prelude</span>::<span class="o">*</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">menu_cb</span><span class="p">(</span><span class="n">m</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="k">impl</span><span class="w"> </span><span class="n">MenuExt</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="kd">let</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="n">choice</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">m</span><span class="p">.</span><span class="n">choice</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">match</span><span class="w"> </span><span class="n">choice</span><span class="p">.</span><span class="n">as_str</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="s">&#34;New</span><span class="se">\t</span><span class="s">&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;New&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="s">&#34;Open</span><span class="se">\t</span><span class="s">&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Open&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="s">&#34;Third&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Third&#34;</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="s">&#34;Quit</span><span class="se">\t</span><span class="s">&#34;</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Quitting&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">app</span>::<span class="n">quit</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">_</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;</span><span class="si">{}</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">choice</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">app</span>::<span class="n">App</span>::<span class="n">default</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">win</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">window</span>::<span class="n">Window</span>::<span class="n">default</span><span class="p">().</span><span class="n">with_size</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span><span class="w"> </span><span class="mi">300</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">menubar</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">menu</span>::<span class="n">MenuBar</span>::<span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">400</span><span class="p">,</span><span class="w"> </span><span class="mi">40</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;rew&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">menubar</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="s">&#34;File/New</span><span class="se">\t</span><span class="s">&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">Shortcut</span>::<span class="nb">None</span><span class="p">,</span><span class="w"> </span><span class="n">menu</span>::<span class="n">MenuFlag</span>::<span class="n">Normal</span><span class="p">,</span><span class="w"> </span><span class="n">menu_cb</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">menubar</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s">&#34;File/Open</span><span class="se">\t</span><span class="s">&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Shortcut</span>::<span class="nb">None</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">menu</span>::<span class="n">MenuFlag</span>::<span class="n">Normal</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">menu_cb</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">menubar</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s">&#34;File/Recent&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Shortcut</span>::<span class="nb">None</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">menu</span>::<span class="n">MenuFlag</span>::<span class="n">Submenu</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">menu_cb</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">menubar</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s">&#34;File/Recent/First</span><span class="se">\t</span><span class="s">&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Shortcut</span>::<span class="nb">None</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">menu</span>::<span class="n">MenuFlag</span>::<span class="n">Normal</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">menu_cb</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">menubar</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s">&#34;File/Recent/Second</span><span class="se">\t</span><span class="s">&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Shortcut</span>::<span class="nb">None</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">menu</span>::<span class="n">MenuFlag</span>::<span class="n">Normal</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">menu_cb</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">menubar</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s">&#34;File/Quit</span><span class="se">\t</span><span class="s">&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Shortcut</span>::<span class="nb">None</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">menu</span>::<span class="n">MenuFlag</span>::<span class="n">Normal</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">menu_cb</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">btn1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">button</span>::<span class="n">Button</span>::<span class="n">new</span><span class="p">(</span><span class="mi">160</span><span class="p">,</span><span class="w"> </span><span class="mi">150</span><span class="p">,</span><span class="w"> </span><span class="mi">80</span><span class="p">,</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Modify 1&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">btn2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">button</span>::<span class="n">Button</span>::<span class="n">new</span><span class="p">(</span><span class="mi">160</span><span class="p">,</span><span class="w"> </span><span class="mi">200</span><span class="p">,</span><span class="w"> </span><span class="mi">80</span><span class="p">,</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Modify 2&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">clear</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">button</span>::<span class="n">Button</span>::<span class="n">new</span><span class="p">(</span><span class="mi">160</span><span class="p">,</span><span class="w"> </span><span class="mi">250</span><span class="p">,</span><span class="w"> </span><span class="mi">80</span><span class="p">,</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;Clear&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">win</span><span class="p">.</span><span class="n">end</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">win</span><span class="p">.</span><span class="n">show</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">btn1</span><span class="p">.</span><span class="n">set_callback</span><span class="p">({</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">menubar</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">menubar</span><span class="p">.</span><span class="n">clone</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">move</span><span class="w"> </span><span class="o">|</span><span class="n">_</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="kd">let</span><span class="w"> </span><span class="nb">Some</span><span class="p">(</span><span class="k">mut</span><span class="w"> </span><span class="n">item</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">menubar</span><span class="p">.</span><span class="n">find_item</span><span class="p">(</span><span class="s">&#34;File/Recent&#34;</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">item</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="s">&#34;Recent/Third&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">Shortcut</span>::<span class="nb">None</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">menu</span>::<span class="n">MenuFlag</span>::<span class="n">Normal</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">menu_cb</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">item</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="s">&#34;Recent/Fourth&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">Shortcut</span>::<span class="nb">None</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">menu</span>::<span class="n">MenuFlag</span>::<span class="n">Normal</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">menu_cb</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">btn2</span><span class="p">.</span><span class="n">set_callback</span><span class="p">({</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">menubar</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">menubar</span><span class="p">.</span><span class="n">clone</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">move</span><span class="w"> </span><span class="o">|</span><span class="n">_</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">menubar</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="s">&#34;File/Recent/Fifth</span><span class="se">\t</span><span class="s">&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">Shortcut</span>::<span class="nb">None</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">menu</span>::<span class="n">MenuFlag</span>::<span class="n">Normal</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">menu_cb</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">menubar</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="s">&#34;File/Recent/Sixth</span><span class="se">\t</span><span class="s">&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">Shortcut</span>::<span class="nb">None</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">menu</span>::<span class="n">MenuFlag</span>::<span class="n">Normal</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">menu_cb</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">clear</span><span class="p">.</span><span class="n">set_callback</span><span class="p">(</span><span class="k">move</span><span class="w"> </span><span class="o">|</span><span class="n">_</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">menubar</span><span class="p">.</span><span class="n">clear_submenu</span><span class="p">(</span><span class="n">idx</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">a</span><span class="p">.</span><span class="n">run</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="一个逐渐消失的动画">一个逐渐消失的动画</h3>
<p>我们使用了线程</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">fltk</span>::<span class="p">{</span><span class="n">enums</span>::<span class="o">*</span><span class="p">,</span><span class="w"> </span><span class="n">prelude</span>::<span class="o">*</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">app</span>::<span class="n">App</span>::<span class="n">default</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">win</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">window</span>::<span class="n">Window</span>::<span class="n">default</span><span class="p">().</span><span class="n">with_size</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span><span class="w"> </span><span class="mi">300</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">win</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="n">Color</span>::<span class="n">White</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// our button takes the whole left side of the window
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">sliding_btn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">button</span>::<span class="n">Button</span>::<span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="mi">300</span><span class="p">,</span><span class="w"> </span><span class="nb">None</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">style_btn</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">sliding_btn</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">win</span><span class="p">.</span><span class="n">end</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">win</span><span class="p">.</span><span class="n">show</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">sliding_btn</span><span class="p">.</span><span class="n">set_callback</span><span class="p">(</span><span class="o">|</span><span class="n">btn</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="n">btn</span><span class="p">.</span><span class="n">w</span><span class="p">()</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="n">btn</span><span class="p">.</span><span class="n">w</span><span class="p">()</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">100</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">return</span><span class="p">;</span><span class="w"> </span><span class="c1">// we&#39;re still animating
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">std</span>:<span class="err">🧵</span>:<span class="nc">spawn</span><span class="p">({</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">btn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">btn</span><span class="p">.</span><span class="n">clone</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">move</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">while</span><span class="w"> </span><span class="n">btn</span><span class="p">.</span><span class="n">w</span><span class="p">()</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">btn</span><span class="p">.</span><span class="n">set_size</span><span class="p">(</span><span class="n">btn</span><span class="p">.</span><span class="n">w</span><span class="p">()</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="n">btn</span><span class="p">.</span><span class="n">h</span><span class="p">());</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">app</span>::<span class="n">sleep</span><span class="p">(</span><span class="mf">0.016</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">app</span>::<span class="n">awake</span><span class="p">();</span><span class="w"> </span><span class="c1">// to awaken the ui thread
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">                    </span><span class="n">btn</span><span class="p">.</span><span class="n">parent</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">redraw</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">a</span><span class="p">.</span><span class="n">run</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">style_btn</span><span class="p">(</span><span class="n">btn</span>: <span class="kp">&amp;</span><span class="nc">mut</span><span class="w"> </span><span class="n">button</span>::<span class="n">Button</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">btn</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="n">Color</span>::<span class="n">from_hex</span><span class="p">(</span><span class="mh">0x42A5F5</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">btn</span><span class="p">.</span><span class="n">set_selection_color</span><span class="p">(</span><span class="n">Color</span>::<span class="n">from_hex</span><span class="p">(</span><span class="mh">0x42A5F5</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">btn</span><span class="p">.</span><span class="n">set_frame</span><span class="p">(</span><span class="n">FrameType</span>::<span class="n">FlatBox</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="一个绘画板程序">一个绘画板程序</h3>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">fltk</span>::<span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">app</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">draw</span>::<span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">draw_line</span><span class="p">,</span><span class="w"> </span><span class="n">draw_point</span><span class="p">,</span><span class="w"> </span><span class="n">draw_rect_fill</span><span class="p">,</span><span class="w"> </span><span class="n">set_draw_color</span><span class="p">,</span><span class="w"> </span><span class="n">set_line_style</span><span class="p">,</span><span class="w"> </span><span class="n">LineStyle</span><span class="p">,</span><span class="w"> </span><span class="n">Offscreen</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">enums</span>::<span class="p">{</span><span class="n">Color</span><span class="p">,</span><span class="w"> </span><span class="n">Event</span><span class="p">,</span><span class="w"> </span><span class="n">FrameType</span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">frame</span>::<span class="n">Frame</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">prelude</span>::<span class="o">*</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">window</span>::<span class="n">Window</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">cell</span>::<span class="n">RefCell</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">rc</span>::<span class="n">Rc</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="no">WIDTH</span>: <span class="kt">i32</span> <span class="o">=</span><span class="w"> </span><span class="mi">800</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="no">HEIGHT</span>: <span class="kt">i32</span> <span class="o">=</span><span class="w"> </span><span class="mi">600</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">app</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">app</span>::<span class="n">App</span>::<span class="n">default</span><span class="p">().</span><span class="n">with_scheme</span><span class="p">(</span><span class="n">app</span>::<span class="n">Scheme</span>::<span class="n">Gtk</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">wind</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Window</span>::<span class="n">default</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">with_size</span><span class="p">(</span><span class="no">WIDTH</span><span class="p">,</span><span class="w"> </span><span class="no">HEIGHT</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">with_label</span><span class="p">(</span><span class="s">&#34;RustyPainter&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">frame</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Frame</span>::<span class="n">default</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">with_size</span><span class="p">(</span><span class="no">WIDTH</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="no">HEIGHT</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">10</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">center_of</span><span class="p">(</span><span class="o">&amp;</span><span class="n">wind</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">frame</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="n">Color</span>::<span class="n">White</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">frame</span><span class="p">.</span><span class="n">set_frame</span><span class="p">(</span><span class="n">FrameType</span>::<span class="n">DownBox</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">wind</span><span class="p">.</span><span class="n">end</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">wind</span><span class="p">.</span><span class="n">show</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// We fill our offscreen with white
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">offs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Offscreen</span>::<span class="n">new</span><span class="p">(</span><span class="n">frame</span><span class="p">.</span><span class="n">width</span><span class="p">(),</span><span class="w"> </span><span class="n">frame</span><span class="p">.</span><span class="n">height</span><span class="p">()).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="cp">#[cfg(not(target_os = </span><span class="s">&#34;macos&#34;</span><span class="cp">))]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">offs</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">draw_rect_fill</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="no">WIDTH</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="no">HEIGHT</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="n">Color</span>::<span class="n">White</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">offs</span><span class="p">.</span><span class="n">end</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">offs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Rc</span>::<span class="n">from</span><span class="p">(</span><span class="n">RefCell</span>::<span class="n">from</span><span class="p">(</span><span class="n">offs</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">frame</span><span class="p">.</span><span class="n">draw</span><span class="p">({</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">offs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">offs</span><span class="p">.</span><span class="n">clone</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">move</span><span class="w"> </span><span class="o">|</span><span class="n">_</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">offs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">offs</span><span class="p">.</span><span class="n">borrow_mut</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">offs</span><span class="p">.</span><span class="n">is_valid</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">offs</span><span class="p">.</span><span class="n">rescale</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">offs</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="no">WIDTH</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="no">HEIGHT</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">offs</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">draw_rect_fill</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="no">WIDTH</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="no">HEIGHT</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="n">Color</span>::<span class="n">White</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">offs</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="no">WIDTH</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="no">HEIGHT</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">offs</span><span class="p">.</span><span class="n">end</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">frame</span><span class="p">.</span><span class="n">handle</span><span class="p">({</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">move</span><span class="w"> </span><span class="o">|</span><span class="n">f</span><span class="p">,</span><span class="w"> </span><span class="n">ev</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c1">// println!(&#34;{}&#34;, ev);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="c1">// println!(&#34;coords {:?}&#34;, app::event_coords());
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="c1">// println!(&#34;get mouse {:?}&#34;, app::get_mouse());
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">offs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">offs</span><span class="p">.</span><span class="n">borrow_mut</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">match</span><span class="w"> </span><span class="n">ev</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">Event</span>::<span class="n">Push</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">offs</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">set_draw_color</span><span class="p">(</span><span class="n">Color</span>::<span class="n">Red</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">set_line_style</span><span class="p">(</span><span class="n">LineStyle</span>::<span class="n">Solid</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="kd">let</span><span class="w"> </span><span class="n">coords</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">app</span>::<span class="n">event_coords</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">coords</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">coords</span><span class="p">.</span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">draw_point</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">offs</span><span class="p">.</span><span class="n">end</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">f</span><span class="p">.</span><span class="n">redraw</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">set_line_style</span><span class="p">(</span><span class="n">LineStyle</span>::<span class="n">Solid</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">Event</span>::<span class="n">Drag</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">offs</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">set_draw_color</span><span class="p">(</span><span class="n">Color</span>::<span class="n">Red</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">set_line_style</span><span class="p">(</span><span class="n">LineStyle</span>::<span class="n">Solid</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="kd">let</span><span class="w"> </span><span class="n">coords</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">app</span>::<span class="n">event_coords</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">draw_line</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">coords</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">coords</span><span class="p">.</span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">coords</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">coords</span><span class="p">.</span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">offs</span><span class="p">.</span><span class="n">end</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">f</span><span class="p">.</span><span class="n">redraw</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">set_line_style</span><span class="p">(</span><span class="n">LineStyle</span>::<span class="n">Solid</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">_</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">app</span><span class="p">.</span><span class="n">run</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="一个flutter风格的计数器">一个flutter风格的计数器</h3>
<p>FLTK在风格化应用方面提供了许多东西，这里通过WindowExt trait完成Styling：</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">fltk</span>::<span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">enums</span>::<span class="p">{</span><span class="n">Align</span><span class="p">,</span><span class="w"> </span><span class="n">Color</span><span class="p">,</span><span class="w"> </span><span class="n">Font</span><span class="p">,</span><span class="w"> </span><span class="n">FrameType</span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">prelude</span>::<span class="o">*</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">*</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="no">BLUE</span>: <span class="nc">Color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Color</span>::<span class="n">from_hex</span><span class="p">(</span><span class="mh">0x42A5F5</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="no">SEL_BLUE</span>: <span class="nc">Color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Color</span>::<span class="n">from_hex</span><span class="p">(</span><span class="mh">0x2196F3</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="no">GRAY</span>: <span class="nc">Color</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Color</span>::<span class="n">from_hex</span><span class="p">(</span><span class="mh">0x757575</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="no">WIDTH</span>: <span class="kt">i32</span> <span class="o">=</span><span class="w"> </span><span class="mi">600</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="no">HEIGHT</span>: <span class="kt">i32</span> <span class="o">=</span><span class="w"> </span><span class="mi">400</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">app</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">app</span>::<span class="n">App</span>::<span class="n">default</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">win</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">window</span>::<span class="n">Window</span>::<span class="n">default</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">with_size</span><span class="p">(</span><span class="no">WIDTH</span><span class="p">,</span><span class="w"> </span><span class="no">HEIGHT</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">with_label</span><span class="p">(</span><span class="s">&#34;Flutter-like!&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">bar</span><span class="w"> </span><span class="o">=</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">frame</span>::<span class="n">Frame</span>::<span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="no">WIDTH</span><span class="p">,</span><span class="w"> </span><span class="mi">60</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;  FLTK App!&#34;</span><span class="p">).</span><span class="n">with_align</span><span class="p">(</span><span class="n">Align</span>::<span class="n">Left</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Align</span>::<span class="n">Inside</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">frame</span>::<span class="n">Frame</span>::<span class="n">default</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">with_size</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="mi">40</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">center_of</span><span class="p">(</span><span class="o">&amp;</span><span class="n">win</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">with_label</span><span class="p">(</span><span class="s">&#34;You have pushed the button this many times:&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">frame</span>::<span class="n">Frame</span>::<span class="n">default</span><span class="p">()</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">size_of</span><span class="p">(</span><span class="o">&amp;</span><span class="n">text</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">below_of</span><span class="p">(</span><span class="o">&amp;</span><span class="n">text</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">.</span><span class="n">with_label</span><span class="p">(</span><span class="s">&#34;0&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">but</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">button</span>::<span class="n">Button</span>::<span class="n">new</span><span class="p">(</span><span class="no">WIDTH</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="no">HEIGHT</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="mi">60</span><span class="p">,</span><span class="w"> </span><span class="mi">60</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;@+6plus&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">win</span><span class="p">.</span><span class="n">end</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">win</span><span class="p">.</span><span class="n">make_resizable</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">win</span><span class="p">.</span><span class="n">show</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// Theming
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">app</span>::<span class="n">background</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="w"> </span><span class="mi">255</span><span class="p">,</span><span class="w"> </span><span class="mi">255</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">app</span>::<span class="n">set_visible_focus</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">bar</span><span class="p">.</span><span class="n">set_frame</span><span class="p">(</span><span class="n">FrameType</span>::<span class="n">FlatBox</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">bar</span><span class="p">.</span><span class="n">set_label_size</span><span class="p">(</span><span class="mi">22</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">bar</span><span class="p">.</span><span class="n">set_label_color</span><span class="p">(</span><span class="n">Color</span>::<span class="n">White</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">bar</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="no">BLUE</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">bar</span><span class="p">.</span><span class="n">draw</span><span class="p">(</span><span class="o">|</span><span class="n">b</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">draw</span>::<span class="n">set_draw_rgb_color</span><span class="p">(</span><span class="mi">211</span><span class="p">,</span><span class="w"> </span><span class="mi">211</span><span class="p">,</span><span class="w"> </span><span class="mi">211</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">draw</span>::<span class="n">draw_rectf</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="p">.</span><span class="n">height</span><span class="p">(),</span><span class="w"> </span><span class="n">b</span><span class="p">.</span><span class="n">width</span><span class="p">(),</span><span class="w"> </span><span class="mi">3</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">text</span><span class="p">.</span><span class="n">set_label_size</span><span class="p">(</span><span class="mi">18</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">text</span><span class="p">.</span><span class="n">set_label_font</span><span class="p">(</span><span class="n">Font</span>::<span class="n">Times</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">count</span><span class="p">.</span><span class="n">set_label_size</span><span class="p">(</span><span class="mi">36</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">count</span><span class="p">.</span><span class="n">set_label_color</span><span class="p">(</span><span class="no">GRAY</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">but</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="no">BLUE</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">but</span><span class="p">.</span><span class="n">set_selection_color</span><span class="p">(</span><span class="no">SEL_BLUE</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">but</span><span class="p">.</span><span class="n">set_label_color</span><span class="p">(</span><span class="n">Color</span>::<span class="n">White</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">but</span><span class="p">.</span><span class="n">set_frame</span><span class="p">(</span><span class="n">FrameType</span>::<span class="n">OFlatFrame</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">// End theming
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">but</span><span class="p">.</span><span class="n">set_callback</span><span class="p">(</span><span class="k">move</span><span class="w"> </span><span class="o">|</span><span class="n">_</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">label</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">count</span><span class="p">.</span><span class="n">label</span><span class="p">().</span><span class="n">parse</span>::<span class="o">&lt;</span><span class="kt">i32</span><span class="o">&gt;</span><span class="p">().</span><span class="n">unwrap</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">).</span><span class="n">to_string</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">count</span><span class="p">.</span><span class="n">set_label</span><span class="p">(</span><span class="o">&amp;</span><span class="n">label</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">app</span><span class="p">.</span><span class="n">run</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
  <title>面向对象思想：对象和实例-Java表述</title>
  <link>https://flatig.vip/posts/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%AE%9E%E4%BE%8B-java%E8%A1%A8%E8%BF%B0/</link>
  <pubDate>Fri, 30 Sep 2022 23:01:47 &#43;0000</pubDate>
  <author>flatig</author>
  <guid>https://flatig.vip/posts/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%AE%9E%E4%BE%8B-java%E8%A1%A8%E8%BF%B0/</guid>
  <description><![CDATA[<p>字数：2402</p>
<p>阅读时长：5 min</p>
<h3 id="面向对象思想对象实例和实例化java表述">面向对象思想：对象，实例和实例化（Java表述）</h3>
<p>面向对象编程(Object-Oriented Programming)以对象为程序核心，可以实现多态，代码复用性等，是一种能帮助开发人员开发出健壮优秀程序的哲学思想。</p>
<p>Java是一门良好支持面向对象特性的语言，可以说它几乎就是“对象的”，因此详细了解面向对象的意义及特性对于Java开发人员来说极为重要。本文将介绍Java中关于对象和实例的概念。</p>
<p>我在查阅某些资料时，曾被“对象实例化”等概念迷惑，本文也将区分不同的几个概念。</p>
<h3 id="类-class">类 Class</h3>
<p>类是一种 <strong>抽象</strong> 的概念，跟它的名字一样，看到“类”应该有“一类东西”这样的感觉。实际在设计上，类就是代表着某一类东西，或者说它是某些对象或物品的抽象。比如，人类就是一个“类”，植物也是一个“类”，流体是一个“类”，它们都是抽象的名词，不是具体的事物，而是对<strong>一类事物的逻辑抽象</strong>。</p>
<p>这类似于<strong>分类</strong>，实际上分类对理解类的概念很重要！对每个实际的物品，人们都可以想出一个它属于的类型，然后把它归于其中。假设某人创造了世界上独一无二的变异大蟑螂，尽管只有一只，它仍然有自己的类，即“变异大蟑螂类”（随这个发明者自己起名字）。</p>
<p>那么为什么能把这一类东西抽象出来呢？这是因为这些东西都具有相同的某些特征，人都是高级灵长类动物，有两个眼睛两只手，发达的大脑等等。这些都是人类的特征，我们叫做“<strong>类的属性</strong>”。它们也可以做一些事，人也可以跑步，也可以制作某些东西和使用东西，会说出一段话等等，这些都是人类的行为，我们叫做“<strong>类的行为</strong>”。</p>
<p>在面向对象的程序设计中，我们把类具有的属性称作 &ldquo;<strong>Field</strong>&quot;（域，字段或成员变量），把类的行为称作 &ldquo;<strong>Method</strong>&quot;（类的方法，某些语言可能称作函数）。在程序中定义一个类，需要指定类的名称，它具有的属性和方法（是什么，可以做什么）。</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 为了便于讲述，下面的程序省略了很多细节
</span></span></span><span class="line"><span class="cl"><span class="c1">// 如：修饰符，构造器等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">class</span> <span class="nc">MyClass</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 这里定义了类的域
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">a_number</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">b_number</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// 这里定义了类的方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">void</span> <span class="nf">give_number</span><span class="o">(</span><span class="kt">int</span> <span class="n">a_num</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b_num</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">a_number</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">b_number</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">do_something</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//do something here!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在定义完类之后，你的程序就可以使用它，就像你使用 int 一样：可以定义一个int的变量，你也可以弄出一个 MyClass 的变量，应该说是MyClass类的一个对象。</p>
<h3 id="对象-object">对象 Object</h3>
<p><strong>对象(Object)</strong>，按照原意其实应该翻译为“东西”，这特指那些存在的事物。对象与类是对应的，比如张三是人类，Tom是猫类，电脑是电子产品类，拖鞋是衣物类一样。如果我们要弄出一个属于MyClass类的对象，那么这个对象就是MyClass类（废话）。</p>
<p>Java中要创造一个类的对象，需要使用 <strong>new 关键字</strong>。JVM遇到 new 时将会进行类加载，空间分配，自动初始化域等一系列过程，在这里我们只需要知道，new 相当于在你的程序世界中腾出了一块空间，在这块刚刚合适的空间上创造了某一类的对象。</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Java" data-lang="Java"><span class="line"><span class="cl"><span class="c1">// 不讨论使用反射、代理、反序列化等一系列创造对象的技术
</span></span></span><span class="line"><span class="cl"><span class="c1">// 我们用最一般，最正常的方式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// new了一个MyClass类的对象并让它调用方法做一些行为
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">new</span> <span class="n">MyClass</span><span class="o">().</span><span class="na">do_something</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// new了一个MyClass类的对象
</span></span></span><span class="line"><span class="cl"><span class="c1">// 并用MyClass类型的变量myClass代表这个对象
</span></span></span><span class="line"><span class="cl"><span class="c1">// 然后通过myClass变量调用方法做一些行为
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">MyClass</span> <span class="n">myClass</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyClass</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">myClass</span><span class="o">.</span><span class="na">do_something</span><span class="o">();</span></span></span></code></pre></td></tr></table>
</div>
</div><p>正如前面说的，类其实可以看做是<strong>分类</strong>，很自然而然地会出现“子类”的现象，子类是具有父类（子类-父类，派生类-超类，有一系列叫法表示相同含义）的属性的，比如人类肯定具有动物的属性，可以做出同样的行为（取决于你会不会做）。注意，不要拿某人和某鱼比较，因为鱼也是动物的子类，鱼并不代表动物，它和人是动物的两个分支，这里的动物是具有所有动物都有的属性的，比如会自己动，具体参见生物分类学。</p>
<p>面向对象编程中也有类似的概念，即<strong>继承，子类会继承父类的所有域和方法</strong>。</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">YourClass</span> <span class="kd">extends</span> <span class="n">MyClass</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">c_number</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">give_c</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">c_number</span> <span class="o">=</span> <span class="n">num</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>现在YourClass继承了MyClass，它的效果看上去就跟下面这样一样（只是为了说明MyClass也具有这些域和方法，实际上完全<strong>不</strong>是！）</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">class</span> <span class="nc">YourClass</span> <span class="kd">extends</span> <span class="n">MyClass</span><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">a_number</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">b_number</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">c_number</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">give_c</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">c_number</span> <span class="o">=</span> <span class="n">num</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">give_number</span><span class="o">(</span><span class="kt">int</span> <span class="n">a_num</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b_num</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">a_number</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">b_number</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">do_something</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//do something here!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="实例-instance-和实例化">实例 Instance 和实例化</h3>
<p>我阅读了一些网上的中文文章，发现了一些奇怪的词语，比如“<strong>对象实例化</strong>”这个词，并产生了一些误解，这里再详细介绍一遍。</p>
<p><strong>Instance</strong> 就是例子的意思，这里译为实例没有任何不妥。它是对于对象而言的，比如人类，假设你在向外星人介绍人类，它们要求你举一个例子，你说张三就是个例子！现在把名词换过来，即张三这个人是人类的一个实例！而通过对象与类的概念可以知道，张三也是人类的一个对象！所以说，<strong>某个类的实例就是这个类的对象</strong>，那么我们创建某个类的对象的<strong>过程</strong>，就说成是创建这个类的实例。其实它们有一个很重要的区别，看下一个小标题！</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">MyClass</span> <span class="n">myClass2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyClass</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">YourClass</span> <span class="n">yourClass2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">YourClass</span><span class="o">();</span></span></span></code></pre></td></tr></table>
</div>
</div><p>上述代码可以说成创建了这两个类的对象，也可以说成进行了这两个类的实例化，所以确切来说，**应该讲成“类实例化”**而不是“对象实例化”。</p>
<h3 id="实例和对象的重要区别">实例和对象的重要区别</h3>
<p>在我们的表述中，对象这个词是很严格的，它和类是<strong>严格对应的关系</strong>，张三是人类的对象这点是绝对的，myClass2 对象是 MyClass类的对象这点也是绝对的，yourClass2 对象更是 YourClass类的对象，再没有别的关系。</p>
<p>等等？！YourClass类是MyCLass类的子类啊，那么yourClass2为什么不能是MyClass类的对象呢（这里可能有点晕，注意看好对象和类这几个字）？</p>
<p>因为 <strong>继承</strong>，它们的区别才显现出来。</p>
<p>要知道，对象关系，比实例关系更<strong>严格</strong>。用什么类，就会创造出什么类的对象，这是严格的“ <strong>是</strong>” 和“一一对应”的关系。</p>
<p>而实例，就跟它的意思“<strong>例子</strong>”一样，要宽容很多。注意看这张图！</p>
<p><a class="lightgallery" href="https://pic1.imgdb.cn/item/633705c816f2c2beb1de1c7f.png" data-thumbnail="https://pic1.imgdb.cn/item/633705c816f2c2beb1de1c7f.png" data-sub-html="<h2>https://pic1.imgdb.cn/item/633705c816f2c2beb1de1c7f.png</h2>"></a></p>
<p>这张图中，我们把丁香和迎春花看做是两个具体的<strong>对象</strong>（实际不是这样的，假设你面前存在这两朵花就行），丁香就是丁香属类的对象，迎春花就是茉莉属类的对象。如果我让你分别<strong>举一个丁香属类和茉莉属类的例子</strong>，你肯定会毫不犹豫地说出丁香和迎春花。但现在，如果我让你举一个木犀科类的例子呢，没错，丁香和迎春花就是木犀科类的例子！就像我让你举一个动物的例子，你会说出某人张三，某王八李四，某河豚王五等等，不管它们怎么样，反正都是动物！</p>
<p>其实， 实例 和 对象 的区别就是“<strong>举例子的分类</strong>” 和 “<strong>实际就是的对应</strong>” 的区别。</p>
<p>在Java中，我们可以通过以下代码实际反应出来</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// 先实例化两个类的两个对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">MyClass</span> <span class="n">myClass3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyClass</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="n">YourClass</span> <span class="n">yourClass3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">YourClass</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">boolean</span> <span class="n">a</span> <span class="o">=</span> <span class="n">myClass3</span><span class="o">.</span><span class="na">getClass</span><span class="o">()</span> <span class="o">==</span> <span class="n">yourClass3</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="kt">boolean</span> <span class="n">b</span> <span class="o">=</span> <span class="n">myClass3</span> <span class="n">instanceOf</span> <span class="n">MyClass</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">boolean</span> <span class="n">c</span> <span class="o">=</span> <span class="n">myClass3</span> <span class="n">instanceOf</span> <span class="n">YourClass</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">boolean</span> <span class="n">d</span> <span class="o">=</span> <span class="n">yourClass3</span> <span class="n">instanceOf</span> <span class="n">YourClass</span><span class="o">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">boolean</span> <span class="n">e</span> <span class="o">=</span> <span class="n">yourClass3</span> <span class="n">instanceOf</span> <span class="n">MyClass</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// a, b, c, d, e 的值分别为
</span></span></span><span class="line"><span class="cl"><span class="c1">// false, true, false, true, true
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>因为 YourClass 类是 MyClass 类的<strong>子类</strong>，就跟上面分类的例子一样， yourClass3 这个对象即是 MyClass 类的实例，又是 YourClass 类的实例，但它始终只是 YourClass 类的对象。</p>
<p>完。</p>
]]></description>
</item>
<item>
  <title>Deepin20.7升级问题，Linux扩容home分区</title>
  <link>https://flatig.vip/posts/deepin20-7%E5%8D%87%E7%BA%A7%E9%97%AE%E9%A2%98linux%E6%89%A9%E5%AE%B9home%E5%88%86%E5%8C%BA/</link>
  <pubDate>Sat, 03 Sep 2022 00:35:46 &#43;0000</pubDate>
  <author>flatig</author>
  <guid>https://flatig.vip/posts/deepin20-7%E5%8D%87%E7%BA%A7%E9%97%AE%E9%A2%98linux%E6%89%A9%E5%AE%B9home%E5%88%86%E5%8C%BA/</guid>
  <description><![CDATA[<p>字数：1711</p>
<p>阅读时长：5分钟</p>
<h2 id="linux挂载新home分区方法deepin-207升级问题">Linux挂载新home分区方法；Deepin 20.7升级问题</h2>
<h3 id="推荐体验deepin-linux">推荐体验Deepin Linux</h3>
<p>Deepin是我很喜欢的Linux发行版，它贴近Windows的图形界面和丰富的软件生态让新用户能快速上手Linux，有漂亮的DDE(Deepin Desktop Environment)，集成deepin-wine和ART(Android RunTime)，可以轻松运行大部分Windows和Android应用，可以说是Deepin让大部分人开始转移到国内开发者开发的Linux系统（虽然国内主导开发的Linux没几个）。</p>
<p>最近在使用Deepin的过程钟出现了一个有趣的问题：将系统版本从Deepin 20.6升级到Deepin20.7之后，无限循环在登录页面无法进入桌面。后面发现这件事与之前做的另一件事有关系，从头开始说起。</p>
<h3 id="linux挂载新home分区">Linux挂载新home分区</h3>
<p>在初装Deepin时，我在我的笔记本上压缩出了60G的空间来装它（挂载 / 和 /home）。我只是想用它来学习Linux，同时作为Android开发的环境（Linux上要比Windows快很多，至少在我的电脑上是这样的），在安装完必要的环境并且工作一段时间后，还剩余将尽20G的空间。</p>
<p>但在后来，我发现Linux上做开发是真的爽（主要是懒，Linux上玩游戏需要一定成本），搭配使用zsh（一款shell，Linux默认为bash）可以省去一些琐碎的步骤，于是渐渐地我将IDEA，PyCharm项目全部转移到Linux，后来学习Rust又安装了Clion。</p>
<p>某天我下载某个文件，发现始终无法下载成功，打开文件管理器，这才看到60G已经被占满了。于是我就想为这块分区再分配一些空间，打开GParted后发现，我的硬盘上竟然还有一块60G的未分配空间，这把我乐坏了，直接把/home挂在这块分区上不就行了嘛。</p>
<p>首先用这块空间新建一个分区，并格式化为ext4，之后：</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 创建新分区的临时挂载目录</span>
</span></span><span class="line"><span class="cl">sudo mkdir /media/home
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 把这块分区挂载在这个目录</span>
</span></span><span class="line"><span class="cl">sudo mount /dev/nvme0n1p6 /media/home 	
</span></span><span class="line"><span class="cl"><span class="c1"># 我的分区是/dev/nvme0n1p6</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 可以使用 lsblk 命令查看各分区</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 同步/home 到 /media/home</span>
</span></span><span class="line"><span class="cl">sudo rsync -aXS /home/. /media/home/.
</span></span><span class="line"><span class="cl"><span class="c1"># 同步时间与home大小有关</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 将原来的home更名</span>
</span></span><span class="line"><span class="cl">sudo mv /home /home_past
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 创建新的home</span>
</span></span><span class="line"><span class="cl">sudo mkdir /home
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 取消分区挂载到/media/home</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 并重新挂载到/home</span>
</span></span><span class="line"><span class="cl">sudo umount /dev/nvme0n1p6
</span></span><span class="line"><span class="cl">sudo mount /dev/nvme0n1p6 /home
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看并记录分区的UUID</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 写入fstab文件，实现开机自动挂载</span>
</span></span><span class="line"><span class="cl">blkid 					<span class="c1"># 记录对应/dev/nvme0n1p6的UUID</span>
</span></span><span class="line"><span class="cl">sudo vim /etc/fstab 	<span class="c1"># 使用vim编辑fstab文件</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 在文件中添加如下内容：</span>
</span></span><span class="line"><span class="cl"><span class="nv">UUID</span><span class="o">=</span>你的UUID		/home	/ext4	rw,nodev,nosuid		0,2
</span></span><span class="line"><span class="cl"><span class="c1"># :wq保存，之后重启系统</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 若重启后发现/home分区挂载正常，则可以删除旧分区</span>
</span></span><span class="line"><span class="cl">sudo rm -rf /home
</span></span><span class="line"><span class="cl"><span class="c1"># 千万不要写 sudo rm -rf / 		手动滑稽</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在这之后，我就用我的新home分区（60G都真香）工作了很长一段时间，直到那天升级系统&hellip;&hellip;</p>
<h3 id="deepin-207升级后在登陆界面无法进入系统">Deepin 20.7升级后在登陆界面无法进入系统</h3>
<p>我是使用apt升级的系统：</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt update
</span></span><span class="line"><span class="cl">sudo apt upgrade</span></span></code></pre></td></tr></table>
</div>
</div><p>一切同往常一样的操作，在重启后：</p>
<p>TNND，输入密码，按下Enter，黑屏，再次回到登陆界面，输入密码，黑屏&hellip;&hellip;</p>
<p>系统从这里开始就<strong>进不去了</strong>。</p>
<p>先是怀疑<strong>升级出错</strong>，于是Ctrl + F2进入tty2，登陆后，再次apt，回到tty1，无效。</p>
<p>后又 <code>dpkg --configure -a</code>， 再次进入，无效。</p>
<p>怀疑<strong>DDE</strong>出问题了，于是重装dde:</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt purge dde dde-desktop dde-dock startdde
</span></span><span class="line"><span class="cl">sudo apt install dde dde-desktop dde-dock startdde</span></span></code></pre></td></tr></table>
</div>
</div><p>依旧无效。</p>
<p>再次怀疑是<strong>显卡驱动</strong>原因，重新安装<strong>Linux内核</strong>：</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 搜索内核</span>
</span></span><span class="line"><span class="cl">apt-cache search linux-image
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 安装内核，同时安装image和headers</span>
</span></span><span class="line"><span class="cl">sudo apt install linux-image-5.18-amd64-desktop
</span></span><span class="line"><span class="cl">sudo apt install linux-headers-5.18-amd64-desktop
</span></span><span class="line"><span class="cl"><span class="c1"># 5.18.？？ 具体版本号忘记了。。。</span></span></span></code></pre></td></tr></table>
</div>
</div><p>再次进入依旧无效。</p>
<p>之后怀疑home<strong>分区挂载</strong>的问题，查看分区情况，并重新挂载一遍：</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 查看分区情况</span>
</span></span><span class="line"><span class="cl">lsblk
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 重新挂载</span>
</span></span><span class="line"><span class="cl">sudo umount /dev/nvme0n1p6
</span></span><span class="line"><span class="cl">sudo mount /dev/nvme0nqp6 /home
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">lsblk</span></span></code></pre></td></tr></table>
</div>
</div><p>分区挂载正常。</p>
<p>然后怀疑是<strong>桌面管理器</strong>的问题，于是安装kde试试：</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 安装kde基本包</span>
</span></span><span class="line"><span class="cl">sudo apt install kde-plasma-desktop
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 在桌面管理器选择界面有两个选项：</span>
</span></span><span class="line"><span class="cl"><span class="c1"># lightdm sddm</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 前者是deepin默认，后者是kde的</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 桌面管理器可以认为与你的登陆界面有关</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用下列命令重写切换桌面管理器</span>
</span></span><span class="line"><span class="cl">sudo dpkg-reconfigure lightdm</span></span></code></pre></td></tr></table>
</div>
</div><p>重启后，进入了kde的登陆界面，在登陆选项竟然看到了<strong>两个deepin桌面</strong>：</p>
<p>deepin 和 <strong>deepin(wayland)</strong></p>
<p>deepin使用Wayland还在试验阶段，所以默认桌面就是用X11的deepin，选择deepin登陆，失败。</p>
<p>选择plasma登陆，失败。</p>
<p>选择，deepin(wayland)，<strong>竟然成功了！</strong></p>
<p>然而进入，这什么东西，一个窗口给我整5倍屏幕大小，卡顿，无法显示chrome&hellip;&hellip;.</p>
<p>那么为什么deepin(wayland)可以进入，而其他都不行呢？这让我更加肯定是显卡驱动的问题，之后又重装了kernel 5.10，5.15，5.18，结果还是没用。</p>
<p>呼~没办法，<strong>重装 <strong>吧！好在我的</strong>home</strong>挂载在了另一块分区，所以重装后我的大部分文件不会丢失。</p>
<p>于是拿出U盘，再次安装。</p>
<p>将系统盘格式化，然后重新挂载为根目录，再把home盘挂载为home。</p>
<p>在漫长的安装后，我终于看到了那个登录界面。好了，开始进入系统。</p>
<p><strong>又一次失败了</strong>。。。。</p>
<p>这可不对了。再试一次，这次把home挂载在系统盘上。</p>
<p>进入系统，这次终于 <strong>成功了！</strong></p>
<p>这说明了不是因为系统或驱动等问题，<strong>问题出在home上</strong>。</p>
<p>但在查看了默认配置文件之后，发现并没有跟正常文件有什么区别，问题的原因找不到。。。</p>
<p>好吧，没办法，手动复原。</p>
<p>将之前的home中重要的文件手动复制到新的home，然后把那个分区格了，再用重新挂载home的方法挂载一遍，重启，进入系统了，<strong>问题解决！</strong></p>
<h3 id="总结">总结</h3>
<p>这次更新系统出现问题，根源是在home分区，暂时未明了具体原因。</p>
<p>目前的解决方案是：在tty1之外的控制台备份home到新的分区，之后重新挂载home，并复原文件。</p>
]]></description>
</item>
<item>
  <title>不只是版本控制：使用Git搭建你的工作流</title>
  <link>https://flatig.vip/posts/%E4%B8%8D%E5%8F%AA%E6%98%AF%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E4%BD%BF%E7%94%A8git%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81/</link>
  <pubDate>Wed, 24 Aug 2022 23:48:27 &#43;0000</pubDate>
  <author>flatig</author>
  <guid>https://flatig.vip/posts/%E4%B8%8D%E5%8F%AA%E6%98%AF%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E4%BD%BF%E7%94%A8git%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid>
  <description><![CDATA[<p>全文字数：5241</p>
<p>阅读时长：15分钟</p>
<h2 id="开始">开始</h2>
<p>在2021 <strong>Stack Overflow</strong> 最受欢迎的工具调查排名中，有超过90%的开发者选择<strong>git</strong>，它如今已成为开发人员的基本技能和工作时首选的版本控制系统。本文将介绍git的基本概念和常用操作，教你使用git快速完成自己的工作流。</p>
<p>本文只介绍<strong>基本</strong>操作和概念，若想对git有更详细的了解，请到git官网（https://git-scm.com）获取更多细节。推荐到官网阅读并下载 <strong>Pro Git</strong> 中文版阅读（https://book.git-scm.com/book/zh/v2）。有时网络不太好，你可以在公众号消息界面发送 <em><strong>ProGit</strong></em> 即可获得文章编写时的最新<strong>pdf</strong>文件。</p>
<p><strong>git</strong>(/ɡɪt/)是一个分布式版本控制软件软件，最初由<strong>Linus Torvalds</strong>创作，于2005年以GPL许可协议发布。最初目的是为了更好地管理Linux内核开发而设计。</p>
<blockquote>
<p>历史（Wikipedia）</p>
<p>自2002年开始，Linus Torvalds决定使用BitKeeper作为Linux内核主要的版本控制系统用以维护代码。因为BitKeeper为专有软件，这个决定在社群中长期遭受质疑。在Linux社群中，特别是理查德·斯托曼与自由软件基金会的成员，主张应该使用开放源代码的软件来作为Linux内核的版本控制系统。Linus曾考虑过采用现成软件作为版本控制系统（例如Monotone），但这些软件都存在一些问题，特别是性能不佳。现成的方案，如CVS的架构，受到Linus的批评。</p>
<p>2005年，Andrew Tridgell写了一个简单程序，可以连接BitKeeper的仓库，BitKeeper著作权拥有者拉里·麦沃伊认为Andrew对BitKeeper内部使用的协议进行逆向工程，决定收回无偿使用BitKeeper的许可。Linux内核开发团队与BitMover公司进行磋商，但无法解决他们之间的歧见。Linus决定自行开发版本控制系统替代BitKeeper，以<strong>十天</strong>的时间编写出git第一个版本。</p>
</blockquote>
<h2 id="安装配置">安装配置</h2>
<ul>
<li>Linux</li>
</ul>
<p>在Linux上可以方便地通过自己系统的软件包管理器安装 git，如：</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Debian:</span>
</span></span><span class="line"><span class="cl">sudo apt install git
</span></span><span class="line"><span class="cl"><span class="c1"># Fedora:</span>
</span></span><span class="line"><span class="cl">sudo yum install git
</span></span><span class="line"><span class="cl"><span class="c1"># Arch Linux:</span>
</span></span><span class="line"><span class="cl">sudo pacman -S git
</span></span><span class="line"><span class="cl"><span class="c1"># ......</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Windows</li>
</ul>
<p>Windows下的安装一般选择直接到官网下载适合自己系统的版本（https://book.git-scm.com/download/win）。</p>
<p>若有winget（Windows下的包管理器），也可以使用：</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">winget</span> <span class="n">install</span> <span class="p">-</span><span class="n">-id</span> <span class="n">Git</span><span class="p">.</span><span class="py">Git</span> <span class="n">-e</span> <span class="p">-</span><span class="n">-source</span> <span class="n">winget</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>macOS</li>
</ul>
<p>一般使用HomeBrew或MacPorts：</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># HomeBrew:</span>
</span></span><span class="line"><span class="cl">brew install git
</span></span><span class="line"><span class="cl"><span class="c1"># MacPorts:</span>
</span></span><span class="line"><span class="cl">sudo port install git</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="一些概念">一些概念</h2>
<h3 id="版本控制">版本控制</h3>
<p>我们使用git，主要是将它作为一个版本控制工具，那么什么是版本控制？</p>
<p>在手机上安装完软件后，我们经常需要对它们进行升级，或者说<strong>版本更新</strong>。旧版和新版软件最明显的区别是什么？就是它们的版本号不同。而一般来说，每个版本对应的软件包，它们在界面、功能、体验等方面总有一些差别，除非开发者故意拿一套不变的代码糊弄。同样的，在实际开发过程中，总是要对程序做修改，导致文件前后发生变化。我们把这些软件包，源代码，或者说<strong>文件</strong>的不同“内容”，叫做不同的<strong>版本</strong>，可以写个版本号来表示。而<strong>版本控制</strong>，就是用来记录一个或多个文件内容（版本）变化的系统。</p>
<p>开发程序的过程中，我们用版本控制工具来管理程序的源代码文件。但几乎所有版本控制工具都可以拿来管理 <strong>所有文件</strong> 的版本。我们可以用它来管理 .kt, .cpp, .rs, .docx, .xlsx, .txt, .png 甚至 .mp4文件。</p>
<p>我们<strong>为什么需要版本控制</strong>呢？假设你是一位装修设计师，正在设计一个房间，本来房间的基本架构都做好了，某天你突然想改装一下卫生间，之后又想改装一下飘窗，后面发现这样会弄坏承重墙和楼下邻居的天花板，由于你改得一团糟，很难再改回去了。这时如果你使用了版本控制，你可以<strong>很轻松</strong>地恢复到原来的样子，通常这样比<strong>备份多个文件</strong>更方便。</p>
<h3 id="分布式版本控制系统">分布式版本控制系统</h3>
<p>分布式是相对于集中式而言的，它们是描述多人协作的版本控制方式的。假设要开发一个大型软件，这个软件要求连接互联网，可以与人对话，会根据用户手机壳颜色更换主题（/手动滑稽），显然一个人不太可能精通所有方面，所以需要很多人同时开发，写好自己的代码然后合并在一个软件里面。</p>
<p>集中式指的是，这个软件的代码存放在一个中心服务器上，即它的仓库是在一个地方统一管理的，每个程序员在开发时都要连接这个服务器，取出最新的文件然后开发再上传。你可以看到这个软件每个人开发的最新情况是什么样的，也可以在别人把服务器卡死不能工作的时候回家休息一段时间。</p>
<p>分布式，则指的是这个软件的完整代码，分布在每一个开发人员手上，即每个人都需要有这个软件的完整仓库。分布式一般会设置一个仓库作为中心仓库，存放目前开发的主线（应该是用来作为代码交换的中心），在每次工作结束之后，每个人只需要提交自己的改动即可，同时再同步一下别人的改动。你可以按照自己的想法完全修改这个仓库，可以在公司停电的情况下在自家工作，也可以在克隆仓库时花一个多小时（一般只在第一次，且大多数都在几分钟）。</p>
<h3 id="存储文件快照">存储文件快照</h3>
<p>不同于CVS等版本控制工具，git对待数据的方式是直接记录文件的快照（某个版本的文件本身），而不是记录文件的变化（这是<strong>基于差异</strong>的版本控制系统 <strong>delta-based</strong>）。</p>
<p>具体来说，基于差异的控制方式是，只记录每次的改动：假设你有一个香蕉，某天你在香蕉上贴了标签，这作为一个版本，之后你又在香蕉上打蜡，再作为一个版本。那么你现有的三个版本是这样记录的，一个香蕉， 香蕉上贴了标签， 香蕉上打了蜡。</p>
<p>而git则是记录每次的文件本身：还是这根香蕉，使用git记录的话，这三个版本则是这样的，一个香蕉，一个贴了标签的香蕉，一个贴了标签并打了蜡的香蕉。</p>
<h3 id="git的一些特点">git的一些特点</h3>
<ul>
<li>
<p>几乎都在本地执行。git中绝大多数操作只需要访问本地资源，一般不需要互联网或其他计算机的信息，这让它在工作时具有令人极其舒服的快速。</p>
</li>
<li>
<p>文件完整性校验。git中所有的数据在存储前都会计算SHA-1值，然后通过哈希值来引用，而不是文件名。这样，你就无法在git不知情的情况下修改文件及内容。同样，git也会发现你在传输过程中发生的信息丢失或文件损坏。</p>
</li>
<li>
<p>一般只添加数据。我们执行的git操作几乎只向数据库中添加数据，而很难<strong>从数据库中</strong>删除数据，它几乎不会执行任何可能导致文件不能回复的操作，这让它更加安全。</p>
</li>
</ul>
<h3 id="git-bash">Git Bash</h3>
<p>在Linux/macOS上，运行git只需要在终端执行 <code>git [commands命令] [arguments参数]</code> 之类的命令即可。在Windows下，会提供 <em><strong>git bash</strong></em> 工具，使用 git bash 可以保持命令的一致性。本文的所有git命令均可以在不同平台运行。</p>
<h2 id="全局配置">全局配置</h2>
<p>版本控制系统需要知道每次都是谁对文件做了修改，因此你需要为git配置你的一些信息，每台计算机（严格说是某个计算机的某个系统中的某个用户）只需要<strong>全局配置</strong>一次，今后的版本控制都将<strong>默认</strong>使用全局配置，你也可以在特定仓库中使用不同的配置。</p>
<p>进行全局配置的工具为 <code>git config</code>，git将配置存储在一些文件中：</p>
<ul>
<li>
<p>Linux/macOS：</p>
<ol>
<li>
<p>系统配置文件： <em><strong>/etc/gitconfig</strong></em></p>
<p>使用 <code>git config --system</code> 进行读写。</p>
</li>
<li>
<p>全局配置文件： <em><strong>~/.gitconfig  或  ~/.config/git/config</strong></em></p>
</li>
</ol>
<p>使用 <code>git config --global</code> 进行读写。</p>
<ol start="3">
<li>
<p>仓库配置文件：<em><strong>仓库/.git/config</strong></em></p>
<p>使用 <code>git config --local</code> 进行读写，前提是你已经在此仓库中。</p>
</li>
</ol>
</li>
<li>
<p>Windows（使用命令同上）</p>
<ol>
<li>系统配置文件：<em><strong>C:\ProgramFiles\Git\etc\gitconfig</strong></em> （在你的Git安装目录下寻找）</li>
<li>全局配置文件：<em><strong>C:\Users\用户名.gitconfig</strong></em></li>
<li>仓库配置文件：<em><strong>仓库\.git\gitconfig</strong></em></li>
</ol>
</li>
</ul>
<p>大多数情况下，我们只需要关注<strong>全局配置文件</strong>，在极少数的情况下会配置仓库配置文件。以下为配置的命令：</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 查看现有配置</span>
</span></span><span class="line"><span class="cl">git config --list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 配置用户信息，默认全局配置</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 可使用 --local 代替 --global 来进行仓库配置</span>
</span></span><span class="line"><span class="cl">git config --global user.name <span class="s2">&#34;你的用户名&#34;</span>
</span></span><span class="line"><span class="cl">git config --global user.email 你的邮箱@mail.com</span></span></code></pre></td></tr></table>
</div>
</div><p>只需要输入两行命令就可以完成配置，之后就可以使用git来工作了。</p>
<h2 id="工作区">工作区</h2>
<p>在git中，文件存在三种状态：</p>
<ul>
<li>已修改  modified</li>
<li>已暂存  staged</li>
<li>已提交  committed</li>
</ul>
<p>与之对应，git项目就会有三个阶段：</p>
<ul>
<li>工作区  working directory</li>
<li>暂存区  staging area (Index)</li>
<li>git仓库  .git repository</li>
</ul>
<p>需要知道的是，你的仓库就是在 项目 .git 文件夹下的一些内容，当你克隆仓库时，你不需要复制克隆别的文件，克隆的只是 .git文件夹。</p>
<p><strong>工作区</strong>就是你本来的项目文件，它在.git文件夹外。严格来说，在你使用git管理你的项目文件后，之前的项目文件就应该看做是从.git仓库的某个特定版本的数据库中提取出来的文件，放在磁盘上以供修改使用。</p>
<p><strong>暂存区</strong>是一个文件，按git的术语也可以叫做索引（Index），它一般放在.git文件夹下，保存了下次将要提交的文件列表信息。比如，你对工作区中的a文件做了修改，那么在你保存后，暂存区中就会记录a文件已经修改，准备下次提交，你可以手动选择是否提交。</p>
<p><strong>git仓库</strong>是你提交的内容，你的本地仓库，它在.git文件夹下，存放项目元数据和对象数据库。</p>
<h2 id="使用git">使用Git</h2>
<p>这里将从头开始创建一个git仓库，并在实际操作中学习如何使用git工作。</p>
<h3 id="创建仓库">创建仓库</h3>
<p>在本地创建仓库有两种方式：</p>
<ul>
<li>将一个本地目录转换为git仓库：</li>
</ul>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 新建文件夹作为仓库</span>
</span></span><span class="line"><span class="cl">mkdir my_git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> my_git
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git init 		<span class="c1"># git init 命令将初始化一个本地仓库</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>从其他计算机或服务器克隆一个git仓库：</li>
</ul>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 从url地址克隆一个git仓库</span>
</span></span><span class="line"><span class="cl">git clone <span class="o">[</span>url<span class="o">]</span> <span class="o">(</span>rename<span class="o">)</span>  <span class="c1">#可以选择添加rename参数更改目录名</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在创建一个git仓库后，对应目录下会出现一个 .git 目录，这里面含有你初始化git仓库所有必要的文件，它是git仓库的骨干。</p>
<h3 id="检查文件状态">检查文件状态</h3>
<p>你工作目录下的文件只有两种状态：<strong>已跟踪</strong> 和 <strong>未跟踪</strong>，它们的区别是是否纳入版本控制。对于已跟踪的文件，git知道要记录它们的版本变化。通过以下命令查看当前文件是否跟踪：</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git status
</span></span><span class="line"><span class="cl"><span class="c1"># 如果有未跟踪的文件你将在Untracked files中看到</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 你还可以看到在暂存区未提交的文件</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用以下命令查看更简略的信息</span>
</span></span><span class="line"><span class="cl">git status -s
</span></span><span class="line"><span class="cl">git status --short
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 git ststis -s 时：</span>
</span></span><span class="line"><span class="cl"><span class="c1">## ??表示未跟踪的文件</span>
</span></span><span class="line"><span class="cl"><span class="c1">##  A表示新添加到暂存区的文件</span>
</span></span><span class="line"><span class="cl"><span class="c1">##  M表示修改后的文件</span>
</span></span><span class="line"><span class="cl"><span class="c1">##</span>
</span></span><span class="line"><span class="cl"><span class="c1">##   注意，状态码包含两个字符，左侧表示暂存区，右侧表示工作区</span>
</span></span><span class="line"><span class="cl"><span class="c1">## MM表示文件已修改并暂存，暂存后又做了修改，后做的修改未暂存</span>
</span></span><span class="line"><span class="cl"><span class="c1">## A 表示已修改且已暂存</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="跟踪暂存文件">跟踪、暂存文件</h3>
<p>在创建仓库之后，我们需要将项目文件添加到版本控制。</p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 使用git add 跟踪未跟踪的文件，可以使用通配符</span>
</span></span><span class="line"><span class="cl">git add files 		<span class="c1"># 跟踪files文件</span>
</span></span><span class="line"><span class="cl">git add .			<span class="c1"># 跟踪所有文件</span>
</span></span><span class="line"><span class="cl">git add src			<span class="c1"># 跟踪src目录下的所有文件</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 在文件修改后，再次使用add命令会将文件添加到暂存区</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 修改文件后及时运行git add命令是一个良好的习惯</span>
</span></span><span class="line"><span class="cl">git add .</span></span></code></pre></td></tr></table>
</div>
</div><p>需要注意的是，只有对文件进行跟踪，才可以使用git进行版本控制。每次修改完成后，应该再次使用add将文件添加到暂存区。</p>
<h3 id="忽略掉某些文件">忽略掉某些文件</h3>
<p>通常来说，为了方便我们会直接运行 git add 命令来将项目所有文件纳入跟踪并添加到暂存区。但有时候，会有一些本地配置文件或生成的中间文件（如gcc编译的目标文件），我们并不需要将其纳入版本控制，但一个一个进行add又有些麻烦。</p>
<p>这种情况下，我们可以在项目根目录（事实上可以在项目内的任何一个目录创建，以起到分别对目录管理）创建一个 <em><strong>.gitignore</strong></em> 文件，在里面列出要忽略的文件格式。</p>
<p>.gitignore文件的格式规范可查看官方文档，这里是一些常用的示例：</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 忽略所有的 .a 文件</span>
</span></span><span class="line"><span class="cl">*.a
</span></span><span class="line"><span class="cl"><span class="c1"># 跟踪所有的 lib.a 文件，这会覆盖之前忽略 .a 文件对 lib.a 文件的影响</span>
</span></span><span class="line"><span class="cl">!lib.a
</span></span><span class="line"><span class="cl"><span class="c1"># 忽略当前目录下的 TODO 文件</span>
</span></span><span class="line"><span class="cl">/TODO
</span></span><span class="line"><span class="cl"><span class="c1"># 忽略所有目录下名为 build 的文件夹</span>
</span></span><span class="line"><span class="cl">build/
</span></span><span class="line"><span class="cl"><span class="c1"># 忽略 app 文件夹下的 build 文件夹</span>
</span></span><span class="line"><span class="cl">app/build/</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查看修改">查看修改</h3>
<p>可以使用 git statue 命令查看文件的修改状态，有时在向仓库提交前我们要查看一些详细的信息，比如某一行修改的具体内容，这时候就可以使用 git diff：</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 查看尚未暂存的文件的变化：</span>
</span></span><span class="line"><span class="cl">git diff 
</span></span><span class="line"><span class="cl"><span class="c1"># 修改的部分是与上次已暂存的文件相比较</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看已暂存的文件的变化：</span>
</span></span><span class="line"><span class="cl">git diff --staged
</span></span><span class="line"><span class="cl">git diff --cached 		<span class="c1"># 与上面一条同义</span>
</span></span><span class="line"><span class="cl"><span class="c1">#修改的部分是与上次已提交到git仓库的文件相比较</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="提交到本地仓库">提交到本地仓库</h3>
<p>当把所有修改完成的文件提交到暂存区后，就可以提交到本地仓库了。在此之前，请务必确认所有已修改或新建的文件都有 add 过，可以使用git status查看，否则提交的时候变化不会被包含在里面。使用如下命令进行提交：</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 提交到本地仓库</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 提交之前确定运行 git add</span>
</span></span><span class="line"><span class="cl">git commit
</span></span><span class="line"><span class="cl"><span class="c1"># 运行此命令会打开文本编辑器，你需要在里面填写提交说明</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 良好的提交声明会让版本管理更加有效</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;Commit Message&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 运行此命令可以很方便地书写提交信息，更加方便，适合短说明文本</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git commit -a
</span></span><span class="line"><span class="cl"><span class="c1"># 运行此命令，git会自动对所有已跟踪的文件执行 git add，使命令更简洁</span></span></span></code></pre></td></tr></table>
</div>
</div><p>要注意，提交到仓库的是暂存区的文件快照，如果工作区的修改未提交到暂存区，将会造成遗漏。</p>
<h3 id="移动移除文件">移动、移除文件</h3>
<p>有时，我们需要git停止对某一文件的跟踪，或者删除某些错误提交到版本库中的文件，或是移动某些文件的位置，这时就需要用到：</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 移除文件</span>
</span></span><span class="line"><span class="cl">git rm file
</span></span><span class="line"><span class="cl"><span class="c1"># 运行此命令会删除工作区的本地文件，并撤销git对其的版本跟踪</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git rm -f file
</span></span><span class="line"><span class="cl"><span class="c1"># 当要rm的文件已被提交到暂存区时，就要使用 -f （force）指令</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 强制rm，这是git的一种安全措施</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 移除在 git 仓库和暂存区中的文件，而不删除工作区的文件</span>
</span></span><span class="line"><span class="cl">git rm --cached file
</span></span><span class="line"><span class="cl"><span class="c1"># 这个命令常作为忘记添加 .gitignore文件的补救措施</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 移动文件</span>
</span></span><span class="line"><span class="cl"><span class="c1"># git mv命令与linux的mv命令使用方法基本相同</span>
</span></span><span class="line"><span class="cl">git mv file files/file
</span></span><span class="line"><span class="cl"><span class="c1"># 将根目录的file文件移动到 files/文件夹下</span>
</span></span><span class="line"><span class="cl">git mv filea fileb
</span></span><span class="line"><span class="cl"><span class="c1"># 将当前目录的 filea 文件更名为 fileb文件</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 mv 命令 可以保持git对文件的跟踪，</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 而不需要在移动或改名后再次运行 mv, git add, git rm</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查看提交历史">查看提交历史</h3>
<p>当我们想查看项目或文件的提交历史时：</p>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 查看提交历史</span>
</span></span><span class="line"><span class="cl">git log
</span></span><span class="line"><span class="cl"><span class="c1"># 默认情况下，git log会按时间顺序排列所有提交</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 它带有很多选项，当然你也可以使用 grep 等工具</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显示每次提交引入的差异</span>
</span></span><span class="line"><span class="cl">git log -p 		<span class="c1"># 或 --patch</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 显示最近2条提交</span>
</span></span><span class="line"><span class="cl">git log -n
</span></span><span class="line"><span class="cl"><span class="c1"># 显示每次提交的简略统计信息</span>
</span></span><span class="line"><span class="cl">git log --stat
</span></span><span class="line"><span class="cl"><span class="c1">#用不同格式显示</span>
</span></span><span class="line"><span class="cl">git log --pretty<span class="o">=[]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># []内可以是 oneline:每个提交放到一行显示</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 还有类似的 short , full ,fuller</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 可以使用 format 来定制记录的显示格式</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git log --pretty<span class="o">=</span>oneline --graph
</span></span><span class="line"><span class="cl"><span class="c1"># 使用此命令会用一些字符“图形化”地显示出每次提交和分支之间的关系</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="撤销操作">撤销操作</h3>
<p>在某个阶段，比如正常运行的程序在修改后无法运行，这时我们可能需要撤销对相应文件的修改。撤销操作有可能会导致之前的工作丢失，在执行撤销前一定要注意。</p>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 重新提交</span>
</span></span><span class="line"><span class="cl">git commit --amend
</span></span><span class="line"><span class="cl"><span class="c1"># 适用于提交后发现某些文件忘记添加或提交信息写错的情况</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 如果暂存区没有文件改变，将只覆盖提交信息</span>
</span></span><span class="line"><span class="cl"><span class="c1"># -amend 选项可以避免因为失误导致仓库版本混乱</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git reset HEAD &lt;file&gt;
</span></span><span class="line"><span class="cl"><span class="c1"># 此命令会将git仓库中的file文件复制到暂存区，不会改变工作区</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 以此来撤销对暂存区文件的修改</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 若文件不存在，则在暂存区中删除</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git checkout -- &lt;file&gt;
</span></span><span class="line"><span class="cl"><span class="c1"># 此命令会同时还原暂存区和工作区的file文件</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="远程仓库">远程仓库</h3>
<p>为了能在git管理的项目上写作，我们通常会使用远程仓库，比如 <strong>Git Hub</strong> ，下面介绍如何连接远程仓库。</p>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 查看当前仓库对应的远程仓库</span>
</span></span><span class="line"><span class="cl">git remote 		<span class="c1"># -v选项会显示git保存的简写</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 如果当前仓库还未配置远程仓库，则需要</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 添加远程仓库</span>
</span></span><span class="line"><span class="cl">git remote add &lt;shortname&gt; &lt;url&gt;
</span></span><span class="line"><span class="cl"><span class="c1"># shortname 设置为你自己对仓库的简写</span>
</span></span><span class="line"><span class="cl"><span class="c1"># url 为远程仓库的地址</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 从远程仓库中同步最新数据</span>
</span></span><span class="line"><span class="cl">git fetch &lt;remote&gt;
</span></span><span class="line"><span class="cl"><span class="c1"># 会从远程仓库下载最新版本的文件和数据</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 推送到远程仓库</span>
</span></span><span class="line"><span class="cl">git push origin master
</span></span><span class="line"><span class="cl"><span class="c1"># 会将本地仓库同步到远程仓库的master分支</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看远程仓库</span>
</span></span><span class="line"><span class="cl">git remote show origin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># rm远程仓库</span>
</span></span><span class="line"><span class="cl">git remote rename name1 name2
</span></span><span class="line"><span class="cl">git remote remove name1
</span></span><span class="line"><span class="cl"><span class="c1"># 命令会将 name1 仓库更名为name2</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 命令会移除 name1 远程仓库</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 需要你对远程仓库具有读写权限</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
  <title>手把手教你搭建自己的静态博客网站—使用Hexo与Git</title>
  <link>https://flatig.vip/posts/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E4%BD%BF%E7%94%A8hexo%E4%B8%8Egit/</link>
  <pubDate>Sun, 10 Jul 2022 10:55:19 &#43;0000</pubDate>
  <author>flatig</author>
  <guid>https://flatig.vip/posts/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E4%BD%BF%E7%94%A8hexo%E4%B8%8Egit/</guid>
  <description><![CDATA[<p>全文字数：3354
阅读时长：15min
文章类型：教程</p>
<h3 id="介绍">介绍</h3>
<hr>
<p>这可能是你见过<strong>最清楚的</strong>，使用 <strong>GitHub</strong> 或 <strong>Gitee</strong> 与 <strong>Hexo</strong>搭建个人博客网站的教程，即使是小白，看不太懂某些概念，按照文中的方法流程操作，也可以完成网站的搭建。此篇教程的目的是搭建完成自己的博客并让它可以运行，更高级的定制操作将在后面介绍</p>
<p>编写时间为2022/7/10，教程中所用工具与网站以当前为准。</p>
<h4 id="基础">基础</h4>
<p>首先介绍一下这几个概念。</p>
<h5 id="静态网站">静态网站</h5>
<p>按照网站的组成和架构，可以将网站分为 静态网站和动态网站。它的<strong>静态</strong>体现在，用户访问的是完全固定的代码，除非网站的开发者做出一些更改，不然用户接收到的内容<strong>永远不会改变</strong>。二者主要有这样几个区别：</p>
<ul>
<li>源代码。静态网站代码均是由 <strong>HTML/CSS</strong> 等静态标记语言组成的。而动态网站还会使用到 <strong>JavaScript</strong>，<strong>PHP</strong> 等语言。</li>
<li>组成。静态网站只有<strong>前端页面</strong>，也即用户能看到的部分。动态网站具有<strong>数据库</strong>（最主要的区别之一），<strong>用户交互功能</strong>等。</li>
<li>托管方式。访问静态网站一般只需访问其 <strong>index.html</strong> 以及与其相关的一系列文件，因此托管静态网站只需要一个能让用户直接访问到<strong>这些</strong>（百度网盘这些单文件访问不行，除非你只有一个index.html）文件的“东西”，甚至可以是经过内网穿透和映射的NAS。而动态网站则需要一个完整的服务器，以实现动态交互功能。</li>
<li>功能。静态网站的主要功能是，提供一些可以让用户看到的信息。动态网站则具有，与用户交换数据，动态访问与数据安全性等。</li>
</ul>
<h5 id="githubgitee">GitHub/Gitee</h5>
<p>GitHub与Gitee均是基于 <strong>git</strong> 的代码托管平台（GitHub是全球使用最多的开源平台）。利用它们提供的  <strong>Pages功能</strong>，可以满足我们托管静态网站的需求，最重要的是，它们是<strong>免费</strong>的！</p>
<p>利用它们搭建静态网站需要频繁使用到git，不会使用的读者有必要了解一下git，参照以下链接：</p>
<p><a href="https://www.runoob.com/git/git-tutorial.html"target="_blank" rel="external nofollow noopener noreferrer">Git教程——菜鸟教程<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>由于GitHub目前的访问不太稳定，有时甚至无法访问，因此本教程还会介绍如何使用Gitee搭建博客。</p>
<h5 id="hexo">Hexo</h5>
<p>Hexo是一款简洁、高效的博客框架，使用Node.js 编写。目前多数托管在GitHub上的博客均使用Hexo。</p>
<p>Hexo使用<strong>Markdown</strong> 渲染引擎解析文章。**用户使用Markdown书写文章内容，Hexo 将其渲染成网页。**Hexo 有很多主题供你选择。</p>
<p>Markdown是一种轻量级的标记语言，或者说是排版语言，人们可以使用Markdown<strong>快速编写具有一定排版的文章</strong>，您现在正在阅读的这篇文章就是由Markdown写出的。Markdown的使用类似于Word，但它更能让你专注于内容写作。Markdown的学习较简单，不了解的读者有必要了解一下，参照以下链接：</p>
<p><a href="https://www.runoob.com/markdown/md-tutorial.html"target="_blank" rel="external nofollow noopener noreferrer">Markdown教程——菜鸟教程<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<h4 id="原理">原理</h4>
<p>用户访问一个网站，其大致流程是：</p>
<ol>
<li>在浏览器<strong>输入域名</strong>，按下回车 。</li>
<li>经过一系列的<strong>DNS信息查询</strong>步骤，得到服务器的<strong>IP地址。</strong></li>
<li>通过得到的IP与端口，经过三次握手，与服务器建立<strong>TCP连接</strong>（不出意外的话，QUIC将在未来取代TCP）。</li>
<li>通过<strong>HTTP/HTTPS协议</strong>请求网页内容，若通过，服务器便回复“OK”并下发网页内容。</li>
<li>浏览器得到HTML内容，将其<strong>解析渲染</strong>，成为用户看到的网页。</li>
</ol>
<p>我们使用GitHub或Gitee创建静态网页并没有涉及到服务器的搭建和处理，我们只需要关心我们网站内容的建设，这是一个<strong>纯前端</strong>的工作，而与客户端沟通等工作便交予服务器。等等，<strong>我们的服务器呢？</strong></p>
<p>在这里，GitHub和Gitee的Pages服务便解决了我们的服务器需要的工作。当用户访问特定的域名时，经过DNS服务器获取IP后指向GitHub/Gitee的Pages服务器，并与之建立连接，当客户端发送请求时，服务器将找到在万千数据中相对应的，然后返回我们的网页给用户。<strong>那我们的网页要放在哪里呢？</strong></p>
<p>我们只需要在GitHub/Gitee上创建一个<strong>仓库</strong>，将我们的网页代码放在上面就可以了（首页还是永远的index.html），我们在里面写什么，看到的网页就是什么。由于GitHub/Gitee Pages的服务基于我们创建的代码仓库，<strong>因此我们只能在上面创建静态网站。</strong></p>
<p>也就是说，在GitHub/Gitee上做一些配置，就相当于我们把服务器创建好了，后面怎么创建网页内容完全是我们的自由。那么<strong>Hexo是干什么的？</strong></p>
<p>Hexo如前面所说，就是一款博客框架，它的作用是帮我们创建出比较精美的博客网页，我们不需要再去学习HTML5之类的新的语言，把它交给前端，我们再去做属于自己的工作（如果你是一名前端工程师，完全可以尝试自己写出一个漂亮的网页）。</p>
<p>我们总体的<strong>流程</strong>就是：</p>
<ol>
<li>使用Hexo或自己<strong>编写</strong>，在电脑本地<strong>生成</strong>静态网站文件。</li>
<li>使用git或Hexo deploy（基于git），将文件<strong>同步</strong>到我们的代码仓库。（你甚至可以<strong>直接上传</strong>到仓库，只要不嫌麻烦）</li>
<li>在服务配置好的情况下，我们的网站便可以<strong>访问</strong>了。</li>
</ol>
<h4 id="准备工作">准备工作</h4>
<p>这里对使用本教程的方法创建网站所需的内容列一清单，工具的Windows版本<strong>官方</strong>下载链接在下，Linux可使用apt自行安装。</p>
<p><strong>基础知识</strong>：</p>
<ul>
<li>Git的使用（用于向GitHub或Gitee提交文件）<a href="https://www.runoob.com/git/git-tutorial.html"target="_blank" rel="external nofollow noopener noreferrer">Git教程——菜鸟教程<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
<li>Markdown（学习简单，用于编写文章和内容）<a href="https://www.runoob.com/markdown/md-tutorial.html"target="_blank" rel="external nofollow noopener noreferrer">Markdown教程——菜鸟教程<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
</ul>
<p><strong>需要工具</strong>：</p>
<ul>
<li>
<p>一台电脑</p>
</li>
<li>
<p>Git（安装适用于自己系统的版本）<a href="https://git-scm.com/downloads"target="_blank" rel="external nofollow noopener noreferrer">Git——下载<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</li>
<li>
<p>Node.js （用于安装和使用 Hexo）<a href="https://nodejs.org/en/download/"target="_blank" rel="external nofollow noopener noreferrer">Node.js——下载<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</li>
<li>
<p>Hexo （博客搭建核心工具）</p>
</li>
</ul>
<p><strong>需要完成的操作</strong>：</p>
<ul>
<li>注册GitHub或Gitee账号</li>
<li>在电脑上创建一个用于存放你的博客的文件夹（路径最好全英文，否则可能有意想不到的错误发生）</li>
</ul>
<h3 id="开始">开始</h3>
<hr>
<p>下面是安装和创建博客的全步骤。</p>
<h4 id="配置hexo">配置Hexo</h4>
<p>这一步将先创建网站的<strong>基本框架</strong>。</p>
<p>首先<strong>安装Git，Node.js</strong>。Windows在安装时注意勾选 &ldquo;Add To Path&rdquo;，以全局使用。</p>
<p>在安装完成后，打开命令行，分别输入git，node，若无报错且出现版本信息，即为安装成功。</p>
<p>创建一个专用于博客的文件夹，其路径名应是全英文。在该文件夹下打开命令行，输入如下命令。</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm install hexo-cli -g
</span></span><span class="line"><span class="cl"><span class="c1"># 全局安装hexo</span>
</span></span><span class="line"><span class="cl">hexo init blog
</span></span><span class="line"><span class="cl"><span class="c1"># 初始化创建blog文件夹</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> blog
</span></span><span class="line"><span class="cl"><span class="c1"># 移动到blog文件夹</span>
</span></span><span class="line"><span class="cl">npm install
</span></span><span class="line"><span class="cl"><span class="c1"># 初始化</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在执行完所有命令后，博客的本地文件就已经搭建完成了。</p>
<p><a class="lightgallery" href="https://pic.imgdb.cn/item/62ca684cf54cd3f937f15c69.png" data-thumbnail="https://pic.imgdb.cn/item/62ca684cf54cd3f937f15c69.png" data-sub-html="<h2>https://pic.imgdb.cn/item/62ca684cf54cd3f937f15c69.png</h2>"></a></p>
<p>这时候，我们可以再输入以下命令以在本地<strong>预览</strong>我们的网站内容。</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">hexo server
</span></span><span class="line"><span class="cl"><span class="c1"># 或 hexo s</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在输入后，按住Ctrl点击出现的链接即可跳转到浏览器。</p>
<p><a class="lightgallery" href="https://pic.imgdb.cn/item/62ca6917f54cd3f937f22d8a.png" data-thumbnail="https://pic.imgdb.cn/item/62ca6917f54cd3f937f22d8a.png" data-sub-html="<h2>https://pic.imgdb.cn/item/62ca6917f54cd3f937f22d8a.png</h2>"></a></p>
<p>如果出现这样的界面，那恭喜你，你已经做好自己的网站了，接下来只差修改内容和让别人看到他，预览完毕后可按 Ctrl + C 结束。</p>
<h4 id="配置本地git">配置本地Git</h4>
<p>首先注册GitHub/Gitee账号，取决于你要使用哪个平台。</p>
<p>打开<strong>Git bash</strong>，输入如下命令。</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git config --global user.name <span class="s2">&#34;你的GitHub/Gitee用户名&#34;</span>
</span></span><span class="line"><span class="cl">git config --global user.email <span class="s2">&#34;你的GitHub/Gitee注册邮箱&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 用于配置本地用户信息</span>
</span></span><span class="line"><span class="cl">ssh-keygen -t rsa -C <span class="s2">&#34;你的GitHub/Gitee注册邮箱&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 用于生成SSH Key，之后出现三个选项，直接回车即可</span></span></span></code></pre></td></tr></table>
</div>
</div><p>由于你的本地 Git 仓库和 GitHub/Gitee 仓库之间的传输是通过<strong>SSH加密</strong>的，所以我们需要配置验证信息。Git通过<strong>非对称加密的公钥与私钥</strong>来完成加密，公钥放置在远程库（GitHub/Gitee）上，私钥放置在客户端上。每次同步都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，在这里采用SSH。当进行推送时，Git会匹配公钥私钥是否合法，若匹配成功则允许推送。</p>
<p>我们的SSH公钥私钥文件默认存放在 <strong>C:\Users\你的用户名\.ssh\</strong> 路径下（Linux默认在 /home/.ssh 下）。</p>
<h4 id="配置githubgitee">配置GitHub/Gitee</h4>
<h5 id="gitee-版">Gitee 版</h5>
<p>在登陆后，首先打开个人设置中的SSH公钥设置，打开我们在SSH公钥文件夹下的 <strong>id_rsa.pub</strong> 文件，将其内容全部复制，粘贴到公钥处。</p>
<p><a class="lightgallery" href="https://pic.imgdb.cn/item/62ca7493f54cd3f937ffc93c.png" data-thumbnail="https://pic.imgdb.cn/item/62ca7493f54cd3f937ffc93c.png" data-sub-html="<h2>https://pic.imgdb.cn/item/62ca7493f54cd3f937ffc93c.png</h2>"></a></p>
<p>然后在git bash 或 shell中输入如下代码判断是否成功：</p>
<p><a class="lightgallery" href="https://pic.imgdb.cn/item/62ca78c3f54cd3f93705487e.png" data-thumbnail="https://pic.imgdb.cn/item/62ca78c3f54cd3f93705487e.png" data-sub-html="<h2>https://pic.imgdb.cn/item/62ca78c3f54cd3f93705487e.png</h2>"></a></p>
<p>这样我们就可以使用Git直接同步仓库内容了。</p>
<p>之后在Gitee中创建一个仓库，仓库名称可以随意选取，但仓库路径<strong>需要与你的用户名相同</strong>，这样才可以用于创建网站。</p>
<p>此外，我们还需要添加Readme文件，其他不做要求。</p>
<!-- raw HTML omitted -->
<p>在此步骤之后，复制仓库的SSH地址。</p>
<p><a class="lightgallery" href="https://pic.imgdb.cn/item/62ca7a07f54cd3f937073e1c.png" data-thumbnail="https://pic.imgdb.cn/item/62ca7a07f54cd3f937073e1c.png" data-sub-html="<h2>https://pic.imgdb.cn/item/62ca7a07f54cd3f937073e1c.png</h2>"></a></p>
<p>然后我们就可以打开 <strong>blog</strong> 文件夹了，打开里面的 <strong>_config.yml</strong> 文件，在其末尾修改编辑如下内容：</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">git</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 若之后出错，可用单引号括起git，即 &#39;git&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">repo</span><span class="p">:</span><span class="w"> </span><span class="l">git@gitee.com:flatig/blog.git</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 这里是你刚刚复制的地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">branch</span><span class="p">:</span><span class="w"> </span><span class="l">main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 仓库分支，gitee一般为master，可在仓库首页查看</span></span></span></code></pre></td></tr></table>
</div>
</div><p>编辑完毕保存之后，即可进入下一步骤。</p>
<hr>
<h5 id="github版">GitHub版</h5>
<p>在登陆后，首先打开 Settings 中的 SSH and GPG keys，打开我们在SSH公钥文件夹下的 <strong>id_rsa.pub</strong> 文件，将其内容全部复制，粘贴到公钥处。</p>
<p><a class="lightgallery" href="https://pic.imgdb.cn/item/62ca7728f54cd3f93702f8a5.png" data-thumbnail="https://pic.imgdb.cn/item/62ca7728f54cd3f93702f8a5.png" data-sub-html="<h2>https://pic.imgdb.cn/item/62ca7728f54cd3f93702f8a5.png</h2>"></a></p>
<p>然后在git bash 或 shell中输入如下代码判断是否成功：</p>
<p><a class="lightgallery" href="https://pic.imgdb.cn/item/62ca7882f54cd3f93704de9f.png" data-thumbnail="https://pic.imgdb.cn/item/62ca7882f54cd3f93704de9f.png" data-sub-html="<h2>https://pic.imgdb.cn/item/62ca7882f54cd3f93704de9f.png</h2>"></a></p>
<p>这样我们就可以使用Git直接同步仓库内容了。</p>
<p>之后在GitHub中创建一个仓库，仓库名要求这样的格式： <strong>用户名.github.io</strong></p>
<p>此外其他不做要求。在此步骤之后，复制仓库的SSH地址。</p>
<p><a class="lightgallery" href="https://pic.imgdb.cn/item/62ca7a4bf54cd3f937079e63.png" data-thumbnail="https://pic.imgdb.cn/item/62ca7a4bf54cd3f937079e63.png" data-sub-html="<h2>https://pic.imgdb.cn/item/62ca7a4bf54cd3f937079e63.png</h2>"></a></p>
<p>然后我们就可以打开 <strong>blog</strong> 文件夹了，打开里面的 <strong>_config.yml</strong> 文件，在其末尾修改编辑如下内容：</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">git</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 若之后出错，可用单引号括起git，即 &#39;git&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">repo</span><span class="p">:</span><span class="w"> </span><span class="l">git@github.com:Flatigers/Flatigers.github.io.git</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 这里是你刚刚复制的地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">branch</span><span class="p">:</span><span class="w"> </span><span class="l">main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 仓库分支，GitHub一般为main，可在仓库首页查看</span></span></span></code></pre></td></tr></table>
</div>
</div><p>编辑完毕保存之后，即可进入下一步骤。</p>
<h4 id="同步到githubgitee">同步到GitHub/Gitee</h4>
<p>在完成上述所有操作后，在 blog 文件夹下打开终端或shell，输入如下命令：</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">npm install hexo-deployer-git --save
</span></span><span class="line"><span class="cl"><span class="c1"># 安装Hexo的git同步插件</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在完成之后，输入如下命令，将仓库同步：</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">hexo clean
</span></span><span class="line"><span class="cl"><span class="c1"># 清除旧文件，可以简写为 hexo c</span>
</span></span><span class="line"><span class="cl">hexo generate
</span></span><span class="line"><span class="cl"><span class="c1"># 生成新文件，可以简写为 hexo g</span>
</span></span><span class="line"><span class="cl">hexo deploy
</span></span><span class="line"><span class="cl"><span class="c1"># 推送并同步，可以简写为 hexo d</span>
</span></span><span class="line"><span class="cl"><span class="c1"># hexo新版本默认deploy前自动generate，故可省略hexo g</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 以上命令可以同时简写为：</span>
</span></span><span class="line"><span class="cl"><span class="c1"># hexo c | hexo d</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在同步完成之后，打开你的 GitHub/Gitee 仓库，你会看到多出了许多文件。</p>
<p><strong>使用GitHub的用户，此时已经可以访问到自己的网站了，只需要在浏览器输入 用户名.github.io</strong></p>
<p>使用Gitee的用户，还需要开启Pages服务。</p>
<p><a class="lightgallery" href="https://pic.imgdb.cn/item/62ca802ef54cd3f937102504.png" data-thumbnail="https://pic.imgdb.cn/item/62ca802ef54cd3f937102504.png" data-sub-html="<h2>https://pic.imgdb.cn/item/62ca802ef54cd3f937102504.png</h2>"></a></p>
<p>若出现问题，可以选择<strong>强制启动HTTPS</strong>，之后便可以通过提供的域名访问了。</p>
<h3 id="完成">完成</h3>
<hr>
<p>到这里已经基本完成了整个网站的搭建工作。</p>
<p>此外，还有一些别的操作，如绑<strong>定高级域名，更换主题，设置评论区，自定义404</strong>等，这些可以在<strong>Hexo的官方文档</strong>中找到，这里后续有可能会继续更新。</p>
<p>继续探索多彩的网络世界吧！</p>
]]></description>
</item>
<item>
  <title>安装使用更可靠的Linux发行版—Debian</title>
  <link>https://flatig.vip/posts/%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E6%9B%B4%E5%8F%AF%E9%9D%A0%E7%9A%84linux%E5%8F%91%E8%A1%8C%E7%89%88debian/</link>
  <pubDate>Tue, 28 Jun 2022 09:53:06 &#43;0000</pubDate>
  <author>flatig</author>
  <guid>https://flatig.vip/posts/%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E6%9B%B4%E5%8F%AF%E9%9D%A0%E7%9A%84linux%E5%8F%91%E8%A1%8C%E7%89%88debian/</guid>
  <description><![CDATA[<p>全文字数：1555
阅读时长：4min
文章类型：教程</p>
<h3 id="介绍">介绍</h3>
<blockquote>
<p>Debian（/ˈdɛbiən/）是完全由自由软件组成的类UNIX操作系统，其包含的多数软件使用GNU通用公共许可协议授权，并由Debian计划的参与者组成团队对其进行打包、开发与维护。Debian以其坚守Unix和自由软件的精神，以及其给予用户的众多选择而闻名。现时Debian提供了超过25,000个软件，超过50,000个软件包，并正式支持10个计算机系统结构。  ——来自Wikipedia</p>
</blockquote>
<p>个人在开发时常使用<strong>Ubuntu</strong>，它也是基于Debian 的Linux发行版，但在近日使用 Debian 后，终于尝到了它的甜头。在我看来，Debian（with KDE）的<strong>流畅度</strong>明显高于Ubuntu，从某些方面来说，它**”更像Linux“<strong>，这么说是由于Ubuntu的衬托，在使用数月之后，使用Gnome的Ubuntu流畅度要比开始慢上很多。总之，Ubuntu对我而言显得有些臃肿了，而Debian则</strong>稳定，简单，规矩**。</p>
<p>本篇文章将从头介绍，从一台Windows电脑开始，如何一步一步安装<strong>Debian 11.3.0</strong>（2022年最新版本）。</p>
<p><strong>注意：较新的电脑安装Debian一般会遇到问题，参照结尾 “问题及注意”</strong></p>
<h3 id="准备工作">准备工作</h3>
<p>在开始前，先确保您准备好了：</p>
<p>一台电脑（以Windows 11为例），一个移动存储设备（U盘，移动硬盘等）。</p>
<h4 id="下载安装镜像">下载安装镜像</h4>
<p>安装镜像即系统本身，我一般较多使用<strong>清华Tuna</strong>和<strong>华为云</strong>提供的镜像服务，这里以Tuna为例。</p>
<p><a class="lightgallery" href="https://pic.imgdb.cn/item/62ba666e1d64b070662fde81.png" data-thumbnail="https://pic.imgdb.cn/item/62ba666e1d64b070662fde81.png" data-sub-html="<h2>https://pic.imgdb.cn/item/62ba666e1d64b070662fde81.png</h2>"></a></p>
<p>我们需要下载安装的是<strong>Live</strong>版本，它包含了基本的所有软件，可以简化我们的安装和使用。</p>
<p><a class="lightgallery" href="https://pic.imgdb.cn/item/62ba67061d64b07066308913.png" data-thumbnail="https://pic.imgdb.cn/item/62ba67061d64b07066308913.png" data-sub-html="<h2>https://pic.imgdb.cn/item/62ba67061d64b07066308913.png</h2>"></a></p>
<p>在这里我选择安装<strong>KDE</strong>图形管理器的版本。可以根据自己的喜好选择Gnome, KDE, xfce 等图形管理器的版本。</p>
<p>点击下载，等它下载的同时可以完成下面的两个步骤。</p>
<h4 id="拆分系统分区">拆分系统分区</h4>
<p>新安装的系统需要找个地方放置它，在Windows 10以后的系统，均可以使用系统自带的工具**“创建并格式化硬盘分区”**。</p>
<p>在开始菜单搜索“硬盘分区”，找到该工具，进入。</p>
<p><a class="lightgallery" href="https://pic.imgdb.cn/item/62ba6a711d64b07066348a45.png" data-thumbnail="https://pic.imgdb.cn/item/62ba6a711d64b07066348a45.png" data-sub-html="<h2>https://pic.imgdb.cn/item/62ba6a711d64b07066348a45.png</h2>"></a></p>
<p>创建的新分区建议应该大于30G，我这里创建一个60G的分区以便使用。</p>
<ol>
<li>右键点击自己要拆分的分区（我选择F盘），点击<strong>压缩卷</strong>。</li>
<li>输入自己要压缩的盘区大小，即新系统的磁盘大小，这里我选择61440MB （即60G）。</li>
<li>压缩完成后，工具中会出现黑色的未分配卷，到这里已经可以了，这个未分配的空间将用于安装系统。</li>
</ol>
<h4 id="启动盘创建工具">启动盘创建工具</h4>
<p><strong>Rufus</strong>是一款开源软件，是我目前最喜欢使用的启动盘创建工具，下载它即可。</p>
<p><a class="lightgallery" href="https://pic.imgdb.cn/item/62ba6a3f1d64b0706634543c.png" data-thumbnail="https://pic.imgdb.cn/item/62ba6a3f1d64b0706634543c.png" data-sub-html="<h2>https://pic.imgdb.cn/item/62ba6a3f1d64b0706634543c.png</h2>"></a></p>
<h4 id="检查电脑设置">检查电脑设置</h4>
<p>在前面的步骤完成后，需要检查自己电脑的启动设置，一般需要：</p>
<p>查找自己的电脑如何进入<strong>引导配置界面</strong>。如我的联想小新需在开机界面按<strong>F12</strong>键。</p>
<p>有些电脑可能会因为安全启动而无法从U盘启动系统。如果出现这种情况，请根据自己电脑的品牌或主板，查找自己的电脑如何进入<strong>UEFI固件设置界面</strong>，如我的电脑需在开机界面按<strong>F10</strong>键。在UEFI界面，关闭<strong>安全启动</strong>。</p>
<h3 id="开始安装">开始安装</h3>
<h4 id="将iso文件写入u盘">将ISO文件写入U盘</h4>
<p>打开Rufus或你自己的启动盘制作工具，这里以Rufus为例。</p>
<p><a class="lightgallery" href="https://pic.imgdb.cn/item/62ba73891d64b0706640277b.png" data-thumbnail="https://pic.imgdb.cn/item/62ba73891d64b0706640277b.png" data-sub-html="<h2>https://pic.imgdb.cn/item/62ba73891d64b0706640277b.png</h2>"></a></p>
<p>选择你的U盘和刚下载的iso文件，不需要更改其他设置，直接开始写入。若询问要以哪种方式写入（iso或dd，dd为Linux上主要用于转换和输出文件的命令），推荐选择iso模式。然后静静等待写入完成。</p>
<p>完成之后，就可以开始下一步安装了。</p>
<h4 id="从u盘启动电脑并安装">从U盘启动电脑并安装</h4>
<p>将U盘插拔一次，以保证电脑正确识别U盘。然后关闭电脑，开机时按F12（不同电脑可能不同）进入引导配置界面。选择U盘引导，启动。
进入Grub界面，直接选择第一个选项进入，即可进入Debian安装程序。
之后根据安装提示进行安装即可。</p>
<h4 id="安装完成">安装完成</h4>
<p>在安装流程结束之后，根据提示，进行重启。等待电脑电源指示灯熄灭后，拔掉U盘，然后静待开机。在此之后每次启动电脑，开机前均会进入Grub界面，可以在Grub界面选择你想进入的系统。Grub为Debian默认引导所必需的，若要直接进入Windows，可在UEFI配置引导，将Windows Boot Manager作为首选引导项。</p>
<h3 id="问题及注意">问题及注意</h3>
<p>Debian的发行版更新周期一般为2年，即每两年正式发布一次系统。例如，19 年 7 月的 Debian 10 “buster” 到 21 年 8 月的 Debian 11 “Bullseye”。
更新周期较长主要会带来硬件驱动兼容问题。我在安装时，遇到GPU，USB串口和网卡等不能正确识别的情况，甚至无法正常启动系统。
<strong>解决方案</strong>：</p>
<ul>
<li>可以尝试安装使用Debian-testing分支，一般不会有驱动问题</li>
<li>若只有网卡声卡等驱动出现问题，不影响系统的正常操作，可以在GitHub或硬件提供商处找到相应的硬件驱动，然后编译或安装、</li>
<li>放弃安装Debian，转向其他Linux（Arch Linux, Fedora, Open SUSE等），基于需求甚至可以使用WSL</li>
</ul>
<p>上述安装流程也可适用于其他系统的安装。​</p>
]]></description>
</item>
<item>
  <title>运行一个RNA-Seq流程</title>
  <link>https://flatig.vip/posts/%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AArna-seq%E6%B5%81%E7%A8%8B/</link>
  <pubDate>Mon, 18 Apr 2022 10:20:02 &#43;0000</pubDate>
  <author>flatig</author>
  <guid>https://flatig.vip/posts/%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AArna-seq%E6%B5%81%E7%A8%8B/</guid>
  <description><![CDATA[<h2 id="运行一个rna-seq流程">运行一个RNA-Seq流程</h2>
<hr>
<blockquote>
<p>此流程根据《使用HISAT StringTie和Ballgown进行的转录本表达水平分析》重复文中的RNA-Seq实验</p>
</blockquote>
<h3 id="流程设计">流程设计</h3>
<p>本流程分为如下步骤：</p>
<ol>
<li>生物信息服务器的搭建</li>
<li>生信环境的配置</li>
<li>在生信环境上操作RNA-seq实验</li>
<li>统计数据及结果分析</li>
</ol>
<h3 id="生信服务器的搭建">生信服务器的搭建</h3>
<p>生物信息学分析所使用的数据量极大，往往需要数百G以上的存储空间及大量内存，这样的需求在一般PC上较难实现。而且生信分析往往需要众人分工协作，由此搭建一个公用服务器十分重要。</p>
<p>本次重复的实验使用的数据较小，在个人PC上完全可以操作，需要的硬盘存储空间约<strong>20G</strong>以内，由于条件的限制，作者本次实验在个人Linux系统上进行操作。</p>
<p>生物信息学实验使用服务器是必不可少的，在今后的操作中，读者需熟练掌握Linux操作系统及shell命令编程的使用，熟练使用云Linux服务器进行操作。国内云计算提供商有<strong>腾讯云，阿里云，华为云</strong>等，新用户均有数月的云服务器体验，读者可根据自己的实际情况自行选择。</p>
<h3 id="生信环境的配置">生信环境的配置</h3>
<h4 id="系统环境">系统环境</h4>
<p>根据此流程需要进行的操作，本次实验需要在Linux系统上配置的环境如下：</p>
<ul>
<li>R语言环境</li>
<li>R包：alyssafrazee/RSkittleBrewer, <strong>ballgown</strong>, genefilter, dplyr, devtools</li>
<li>分析软件：Hisat2, StringTie, <strong>Samtools</strong>， gffcompare</li>
</ul>
<p>安装hisat2和StringTie:</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo apt update
</span></span><span class="line"><span class="cl">sudo apt install hisat2
</span></span><span class="line"><span class="cl">sudo apt install stringtie</span></span></code></pre></td></tr></table>
</div>
</div><p>安装Conda并使用其安装Samtools, gffcompare:</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">wget -c https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
</span></span><span class="line"><span class="cl"># 适合于linux 64位
</span></span><span class="line"><span class="cl">chmod 777 Miniconda3-latest-Linux-x86_64.sh
</span></span><span class="line"><span class="cl">#给执行权限
</span></span><span class="line"><span class="cl">bash Miniconda3-latest-Linux-x86_64.sh
</span></span><span class="line"><span class="cl">#运行安装程序，所有选项均选&#39;yes&#39;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
</span></span><span class="line"><span class="cl">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
</span></span><span class="line"><span class="cl">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/
</span></span><span class="line"><span class="cl">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/
</span></span><span class="line"><span class="cl">#配置conda频道，这里选择清华Tuna镜像
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">conda install samtools
</span></span><span class="line"><span class="cl">conda install gffcompare
</span></span><span class="line"><span class="cl">#使用conda安装Samtools和gffcompare
</span></span><span class="line"><span class="cl">#这里使用conda安装是因为作者使用apt安装samtools时出现问题
</span></span><span class="line"><span class="cl">#conda是专用于生物信息学分析的环境配置器
</span></span><span class="line"><span class="cl">#Hisat, StringTie以及其他R包均可使用conda安装</span></span></code></pre></td></tr></table>
</div>
</div><p>安装 R 和 R包Ballgown：</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">conda create -n Rspcae
</span></span><span class="line"><span class="cl">#创建名为Rspace的conda环境，可以替换成自己需要的名称
</span></span><span class="line"><span class="cl">source activate Rspace
</span></span><span class="line"><span class="cl">#激活此环境
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">conda install r-base=4.1.3
</span></span><span class="line"><span class="cl">#安装4.1.3的R，可以在conda官网包管理页面查询r包的最新版本
</span></span><span class="line"><span class="cl">conda install r-ballgown
</span></span><span class="line"><span class="cl">#conda 安装r包需要在包名前 添加 r-
</span></span><span class="line"><span class="cl">#此处作者使用conda安装r包，也是因为在R中安装遇到问题
</span></span><span class="line"><span class="cl">#若无问题，可以直接在R中安装任何R包，具体为：
</span></span><span class="line"><span class="cl">#install.packages(ballgown) 或
</span></span><span class="line"><span class="cl">#BiocManager::install(&#34;ballgown&#34;)
</span></span><span class="line"><span class="cl">#使用BiocManager需先安装，参加下一步
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">conda deactivate
</span></span><span class="line"><span class="cl">#安装完成后退出当前conda环境</span></span></code></pre></td></tr></table>
</div>
</div><p>安装其他R包：</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">R        
</span></span><span class="line"><span class="cl">#进入R环境
</span></span><span class="line"><span class="cl">install.packages(“devtools”)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">install.packages(&#34;BiocManager&#34;)
</span></span><span class="line"><span class="cl">library(&#34;BiocManager&#34;)
</span></span><span class="line"><span class="cl">#安装并导入BiocManager
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">BiocManager::install(c(&#34;alyssafrazee/RSkittleBrewer&#34;,&#34;ballgown&#34;,&#34;genefilter&#34;,&#34;dplyr&#34;))
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#source(&#34;http://www.bioconductor.org/biocLite.R&#34;)
</span></span><span class="line"><span class="cl">#BiocManager::biocLite(c(&#34;alyssafrazee/RSkittleBrewer&#34;,&#34;ballgown&#34;,&#34;genefilter&#34;,&#34;dplyr&#34;))
</span></span><span class="line"><span class="cl">#安装R包,此项为旧版本用法
</span></span><span class="line"><span class="cl">#此处也可使用：
</span></span><span class="line"><span class="cl">#install.packages()</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="资源">资源</h4>
<p>此处所需资源为文章中提供的测序数据及参考序列等资料：</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cd /home/username/RNA
</span></span><span class="line"><span class="cl">nohup wget ftp://ftp.ccb.jhu.edu/pub/RNAseq_protocol/chrX_data.tar.gz &amp;
</span></span><span class="line"><span class="cl">tar zxvf chrX_data.tar.gz
</span></span><span class="line"><span class="cl">#先cd到工作环境下文件夹
</span></span><span class="line"><span class="cl">#下载并解压</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="在生信环境上操作rna-seq实验">在生信环境上操作RNA-seq实验</h3>
<h4 id="hisat2将reads与genome匹配">hisat2:将reads与genome匹配</h4>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for i in *1.fastq.gz; 
</span></span><span class="line"><span class="cl">do
</span></span><span class="line"><span class="cl">i=${i%1.fastq.gz*}; 
</span></span><span class="line"><span class="cl">nohup hisat2 -p 8 --dta -x /home/username/RNA/chrX_data/indexes/chrX_tran -1 ${i}1.fastq.gz -2 ${i}2.fastq.gz -S /home/username/RNA/chrX_data/result/${i}align.sam /home/username/RNA/chrX_data/result/${i}align.log &amp; 
</span></span><span class="line"><span class="cl">done
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#此步骤将在/ home/username/RNA/chrX_data/result/ 下生成sample reads的sam文件</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="samtools将sam文件转换为bam文件">samtools:将sam文件转换为bam文件</h4>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for i in *.sam;
</span></span><span class="line"><span class="cl">do 
</span></span><span class="line"><span class="cl">i=${i%_align.sam*};
</span></span><span class="line"><span class="cl">nohup samtools sort -@ 8 -o ${i}.bam ${i}_align.sam &amp; 
</span></span><span class="line"><span class="cl">done
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#此步骤将在同目录下生成bam文件</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="stringtie组装转录本并定量表达基因">stringtie:组装转录本并定量表达基因</h4>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for i in *.bam; 
</span></span><span class="line"><span class="cl">do 
</span></span><span class="line"><span class="cl">i=${i%.bam*};
</span></span><span class="line"><span class="cl">nohup stringtie -p 8 -G /home/username/RNA/chrX_data/genes/chrX.gtf -o ${i}.gtf ${i}.bam &amp; 
</span></span><span class="line"><span class="cl">done
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#此步骤将在同目录下生成gtf文件</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="stringtie合并所有转录本">stringtie:合并所有转录本</h4>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">stringtie --merge -p 8 -G  /home/username/RNA/chrX_data/genes/chrX.gtf -o stringtie_merged.gtf  /home/username/RNA/chrX_data/mergelist.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#此步骤将在同目录下生成 stringtie_merged.gtf 文件</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="gffcompare检测相对于注释文件转录本的组装情况">gffcompare:检测相对于注释文件，转录本的组装情况</h4>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">gffcompare -r /home/username/RNA/chrX_data/genes/chrX.gtf  -G -o merged stringtie_merged.gtf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#此步骤将生成如下文件：
</span></span><span class="line"><span class="cl">#gffcmp.annotated.gtf
</span></span><span class="line"><span class="cl">#它在每个转录本上添加一个 “类代码”（描述参见流程文档）和注释文件中的转录本名称
</span></span><span class="line"><span class="cl">#gffcmp.stats
</span></span><span class="line"><span class="cl">#输出文件中计算不同基因特征的灵敏度和精确度（P值）统计</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="stringtie重新组装转录本并估算基因表达丰度并为ballgown创建读入文件">stringtie:重新组装转录本并估算基因表达丰度，并为ballgown创建读入文件</h4>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for i in *_chrX.bam; 
</span></span><span class="line"><span class="cl">do 
</span></span><span class="line"><span class="cl">i=${i%_chrX.bam*};
</span></span><span class="line"><span class="cl">nohup stringtie -e -B -p 8 -G stringtie_merged.gtf -o ballgown/${i}/${i}_chrX.gtf  ${i}_chrX.bam &amp; 
</span></span><span class="line"><span class="cl">done
</span></span><span class="line"><span class="cl">#此步骤将在 /home/username/RNA/chrX_data/ballgown/ 下生成
</span></span><span class="line"><span class="cl">#以sample名为文件夹名的的ballgown读取文件</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="统计数据及结果分析">统计数据及结果分析</h3>
<p>此步骤将在R环境中进行统计步骤及结果分析</p>
<h4 id="数据处理">数据处理</h4>
<ul>
<li>进入R并加载R包</li>
</ul>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">library(ballgown)
</span></span><span class="line"><span class="cl">library(RSkittleBrewer)
</span></span><span class="line"><span class="cl">library(genefilter)
</span></span><span class="line"><span class="cl">library(dplyr)
</span></span><span class="line"><span class="cl">library(devtools)</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>加载表型数据</li>
</ul>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">setwd(&#34;/home/username/RNA/chrX_data/&#34;)
</span></span><span class="line"><span class="cl">#设置R工作环境目录
</span></span><span class="line"><span class="cl">pheno_data = read.csv(&#34;geuvadis_phenodata.csv&#34;)</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>读入StringTie的计算结果</li>
</ul>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">bg_chrX = ballgown(dataDir = &#34;/home/username/RNA/chrX_data/result/ballgown&#34;, samplePattern = &#34;ERR&#34;, pData=pheno_data)</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>滤去低丰度基因（样本间差异少于一个转录本）</li>
</ul>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">bg_chrX_filt = subset(bg_chrX,&#34;rowVars(texpr(bg_chrX)) &gt;1&#34;,genomesubset=TRUE)</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>得到组间有差异的转录本和基因</li>
</ul>
<div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">results_transcripts = stattest(bg_chrX_filt, feature=&#34;transcript&#34; covariate=&#34;sex&#34;,adjustvars = c(&#34;population&#34;),  getFC=TRUE, meas=&#34;FPKM&#34;)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">results_genes = stattest(bg_chrX_filt, feature=&#34;gene&#34;, covariate=&#34;sex&#34;, adjustvars = c(&#34;population&#34;), getFC=TRUE, meas=&#34;FPKM&#34;)</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>对转录本结果添加基因名</li>
</ul>
<div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">results_transcripts = data.frame(geneNames=ballgown::geneNames(bg_chrX_filt), geneIDs=ballgown::geneIDs(bg_chrX_filt), results_transcripts)</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>转录本与基因结果按P值排序</li>
</ul>
<div class="highlight" id="id-18"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">results_transcripts=arrange(results_transcripts,pval)
</span></span><span class="line"><span class="cl">results_genes=arrange(results_genes,pval)</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>将排序结果写入文件</li>
</ul>
<div class="highlight" id="id-19"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">write.csv(results_transcripts, &#34;chrX_transcript_results.csv&#34;,row。names=FALSE)
</span></span><span class="line"><span class="cl">write.csv(results_genes, &#34;chrX_gene_results.csv&#34;,row.names=FALSE)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#此步骤生成 chrX_transcript_results.csv, chrX_gene_results.csv
</span></span><span class="line"><span class="cl">#两个文字表格文件</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>识别q值小于0.05的转录物和基因（性别间表达有差异）</li>
</ul>
<div class="highlight" id="id-20"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">subset(results_transcripts,results_transcripts$qval&lt;0.05)
</span></span><span class="line"><span class="cl">subset(results_genes,results_genes$qval&lt;0.05)</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="结果可视化">结果可视化</h4>
<ul>
<li>FPKM为参考值，性别为区分条件作图</li>
</ul>
<div class="highlight" id="id-21"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">palette(rainbow(5))
</span></span><span class="line"><span class="cl">#为调色板指定颜色
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">fpkm = texpr(bg_chrX,meas=&#34;FPKM&#34;)
</span></span><span class="line"><span class="cl">fpkm = log2(fpkm+1)
</span></span><span class="line"><span class="cl">#提取FPKM值并做log转换
</span></span><span class="line"><span class="cl">boxplot(fpkm,col=as.numeric(pheno_data$sex),las=2,ylab=&#39;log2(FPKM+1)&#39;)</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>单个样本在转录组上的分布</li>
</ul>
<div class="highlight" id="id-22"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ballgown::transcriptNames(bg_chrX)[12]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ballgown::geneNames(bg_chrX)[12]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 绘制箱线图
</span></span><span class="line"><span class="cl">plot(fpkm[12,] ~ pheno_data$sex, border=c(1,2),
</span></span><span class="line"><span class="cl">    main=paste(ballgown::geneNames(bg_chrX)[12],&#39; : &#39;,
</span></span><span class="line"><span class="cl">    ballgown::transcriptNames(bg_chrX)[12]),pch=19, xlab=&#34;Sex&#34;,
</span></span><span class="line"><span class="cl">    ylab=&#39;log2(FPKM+1)&#39;)
</span></span><span class="line"><span class="cl">points(fpkm[12,] ~ jitter(as.numeric(pheno_data$sex)),
</span></span><span class="line"><span class="cl">    col=as.numeric(pheno_data$sex))</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>查看某一基因位置上所有转录组</li>
</ul>
<div class="highlight" id="id-23"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">plotTranscripts(ballgown::geneIDs(bg_chrX)[2263], bg_chrX, main=c(&#39;Gene XIST in sample ERR188234&#39;), sample=c(&#39;ERR188234&#39;))
</span></span><span class="line"><span class="cl">#根据ERR188234.gtf的文件，查出XIST基因所在位置编码2263，进行绘图</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>以性别为区分查看特定基因表达情况</li>
</ul>
<div class="highlight" id="id-24"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">plotMeans(&#39;MSTRG.56&#39;, bg_chrX_filt,groupvar=&#34;sex&#34;,legend=FALSE)</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<p>由于作者精力有限，编写时难免会出现错误和过失，对您的阅读和操作造成的不便请您谅解。如果方便，还请把错误处邮件至本人邮箱，或于公众号处留言，十分感谢！</p>
]]></description>
</item>
<item>
  <title>个人公众号开通啦</title>
  <link>https://flatig.vip/posts/%E4%B8%AA%E4%BA%BA%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E9%80%9A%E5%95%A6/</link>
  <pubDate>Mon, 18 Apr 2022 09:43:58 &#43;0000</pubDate>
  <author>flatig</author>
  <guid>https://flatig.vip/posts/%E4%B8%AA%E4%BA%BA%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E9%80%9A%E5%95%A6/</guid>
  <description><![CDATA[<h2 id="个人微信公众号开通啦">个人微信公众号开通啦</h2>
<p><em>2022年4月16日</em>，个人微信公众号 “<strong>flatig的开发日记</strong>” 正式开通啦！
欢迎各位朋友前来关注！！！
<a class="lightgallery" href="https://pic.imgdb.cn/item/625cc838239250f7c53b0b3d.png" data-thumbnail="https://pic.imgdb.cn/item/625cc838239250f7c53b0b3d.png" data-sub-html="<h2>https://pic.imgdb.cn/item/625cc838239250f7c53b0b3d.png</h2>"></a>
<a class="lightgallery" href="https://pic.imgdb.cn/item/625cc849239250f7c53b2990.png" data-thumbnail="https://pic.imgdb.cn/item/625cc849239250f7c53b2990.png" data-sub-html="<h2>https://pic.imgdb.cn/item/625cc849239250f7c53b2990.png</h2>"></a>
<a class="lightgallery" href="https://pic.imgdb.cn/item/625cc800239250f7c53aa683.jpg" data-thumbnail="https://pic.imgdb.cn/item/625cc800239250f7c53aa683.jpg" data-sub-html="<h2>公众号</h2>"></a></p>
]]></description>
</item>
<item>
  <title>如果你忘记我</title>
  <link>https://flatig.vip/posts/%E8%AF%BA%E8%B4%9D%E5%B0%94%E6%96%87%E5%AD%A6%E5%A5%96%E5%BE%97%E4%B8%BB%E7%BB%8F%E5%85%B8%E6%83%85%E8%AF%97%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%BF%98%E8%AE%B0%E6%88%91/</link>
  <pubDate>Mon, 14 Mar 2022 16:30:08 &#43;0000</pubDate>
  <author>flatig</author>
  <guid>https://flatig.vip/posts/%E8%AF%BA%E8%B4%9D%E5%B0%94%E6%96%87%E5%AD%A6%E5%A5%96%E5%BE%97%E4%B8%BB%E7%BB%8F%E5%85%B8%E6%83%85%E8%AF%97%E5%A6%82%E6%9E%9C%E4%BD%A0%E5%BF%98%E8%AE%B0%E6%88%91/</guid>
  <description><![CDATA[<p><a href="https://www.bilibili.com/video/BV1pi4y1y7cA"target="_blank" rel="external nofollow noopener noreferrer">英语兔朗读<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>诺贝尔文学奖得主经典情诗《如果你忘记我》(聂鲁达)</p>
<h2 id="if-you-forget-me">If You Forget Me</h2>
<p>by Pablo Neruda</p>
<p>I want you to know one thing
You know how this is:</p>
<p>If I look
at the crystal moon, at the red branch
of the slow autumn at my window,
If I touch
near the fire, the impalpable ash
or the wrinkled body of the log.
Everything carries me to you,
as if everything that exist,
aromas, light, metals,
were little boats that sail
toward those isles of yours that wait for me.</p>
<p>Well, now,
if little by little you stop loving me
I shall stop loving you little by little.
If suddenly you forget me
do not look for me,
for I shall already have forgotten you.
If you think it long and mad,
the wind of banners
the passes through my life,
and you decide to leave me at the shore
of the heart where I have roots,
remember
that on that day,
at that hour
I shall lift my arms
and my roots will set off
to seek another land.</p>
<p>But if each day,
each hour,
you feel that you are destined for me
with implacable sweetness,
if each day a flower
climbs up to your lips to seek me,
ah my love,
ah my own,
in me all that fire is repeated,
in me nothing is extinguished or forgotten,
my love feeds on your love, beloved
and as long as you live it will be in your arms
without leving mine.</p>
<h2 id="如果你将我遗忘">如果你将我遗忘</h2>
<p>by <a href="https://space.bilibili.com/33050048"target="_blank" rel="external nofollow noopener noreferrer">29号星河水手<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>有件事
想要告诉你。</p>
<p>你明白怎么一回事的：
如果我于悠缓的秋天立于窗口
凝视
晶莹的月，红色的枝桠，
如果我于炉火边
轻触
细不可感的灰烬
或皱褶斑斑的圆木躯干，
凡此种种皆引我贴近你，
仿佛存在的一事一物，
芳香，光影，金属，
是一艘艘小船，航向
那些等候我前往造访的你的小岛。</p>
<p>然而，
倘若你对我的爱意逐渐消逝
我也将缓缓终止我的爱。</p>
<p>如果你突然
将我遗忘，
就别来找我，
因为我将早已忘记你。</p>
<p>如果你认为那穿越我一生的
旌旗之风
既久且狂，
决定
在我植根的心的岸边
与我分手，
请记住，
在那一天，
那一刻，
我将高举双臂，
我的根将动身远航
另寻新土。</p>
<p>但是
如果每一天，
每一刻，
你满心欢喜地
觉得你我命运相依，
如果每一天都有一朵花
爬上你的双唇前来寻我，
啊，亲爱的，啊，我的人儿，
我心中所有的火会再次燃起，
浇不熄也忘不了，
我的爱因你的爱而饱满，亲爱的，
只要你一息尚存，它就会在你怀里
且被我紧抱。</p>
<p>——《二十首情诗和一首绝望的歌》</p>
]]></description>
</item>
<item>
  <title>使用HISAT StringTie和Ballgown进行的转录本表达水平分析（中译）(四)</title>
  <link>https://flatig.vip/posts/%E4%BD%BF%E7%94%A8hisat-stringtie%E5%92%8Cballgown%E8%BF%9B%E8%A1%8C%E7%9A%84%E8%BD%AC%E5%BD%95%E6%9C%AC%E8%A1%A8%E8%BE%BE%E6%B0%B4%E5%B9%B3%E5%88%86%E6%9E%90%E4%B8%AD%E8%AF%91%E5%9B%9B/</link>
  <pubDate>Sat, 12 Mar 2022 17:01:35 &#43;0000</pubDate>
  <author>flatig</author>
  <guid>https://flatig.vip/posts/%E4%BD%BF%E7%94%A8hisat-stringtie%E5%92%8Cballgown%E8%BF%9B%E8%A1%8C%E7%9A%84%E8%BD%AC%E5%BD%95%E6%9C%AC%E8%A1%A8%E8%BE%BE%E6%B0%B4%E5%B9%B3%E5%88%86%E6%9E%90%E4%B8%AD%E8%AF%91%E5%9B%9B/</guid>
  <description><![CDATA[<h3 id="流程">流程</h3>
<h5 id="将rna-seq-reads与基因组进行比对--时间20分钟">将RNA-seq reads与基因组进行比对 ● 时间&lt;20分钟</h5>
<ol>
<li>将每个样本的reads映射到参考基因组上</li>
</ol>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ hisat2 -p 8 --dta -x chrX_data/indexes/chrX_tran -1
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188044_chrX_1.fastq.gz -2
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188044_chrX_2.fastq.gz -S ERR188044_chrX.sam
</span></span><span class="line"><span class="cl">$ hisat2 -p 8 --dta -x chrX_data/indexes/chrX_tran -1
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188104_chrX_1.fastq.gz -2
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188104_chrX_2.fastq.gz -S ERR188104_chrX.sam
</span></span><span class="line"><span class="cl">$ hisat2 -p 8 --dta -x chrX_data/indexes/chrX_tran -1 
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188234_chrX_1.fastq.gz -2
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188234_chrX_2.fastq.gz -S ERR188234_chrX.sam
</span></span><span class="line"><span class="cl">$ hisat2 -p 8 --dta -x chrX_data/indexes/chrX_tran -1
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188245_chrX_1.fastq.gz -2
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188245_chrX_2.fastq.gz -S ERR188245_chrX.sam
</span></span><span class="line"><span class="cl">$ hisat2 -p 8 --dta -x chrX_data/indexes/chrX_tran -1
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188257_chrX_1.fastq.gz -2
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188257_chrX_2.fastq.gz -S ERR188257_chrX.sam
</span></span><span class="line"><span class="cl">$ hisat2 -p 8 --dta -x chrX_data/indexes/chrX_tran -1
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188273_chrX_1.fastq.gz -2
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188273_chrX_2.fastq.gz -S ERR188273_chrX.sam
</span></span><span class="line"><span class="cl">$ hisat2 -p 8 --dta -x chrX_data/indexes/chrX_tran -1
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188337_chrX_1.fastq.gz -2
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188337_chrX_2.fastq.gz -S ERR188337_chrX.sam
</span></span><span class="line"><span class="cl">$ hisat2 -p 8 --dta -x chrX_data/indexes/chrX_tran -1
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188383_chrX_1.fastq.gz -2
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188383_chrX_2.fastq.gz -S ERR188383_chrX.sam
</span></span><span class="line"><span class="cl">$ hisat2 -p 8 --dta -x chrX_data/indexes/chrX_tran -1
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188401_chrX_1.fastq.gz -2
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188401_chrX_2.fastq.gz -S ERR188401_chrX.sam
</span></span><span class="line"><span class="cl">$ hisat2 -p 8 --dta -x chrX_data/indexes/chrX_tran -1
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188428_chrX_1.fastq.gz -2
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188428_chrX_2.fastq.gz -S ERR188428_chrX.sam
</span></span><span class="line"><span class="cl">$ hisat2 -p 8 --dta -x chrX_data/indexes/chrX_tran -1
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188454_chrX_1.fastq.gz -2
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR188454_chrX_2.fastq.gz -S ERR188454_chrX.sam
</span></span><span class="line"><span class="cl">$ hisat2 -p 8 --dta -x chrX_data/indexes/chrX_tran -1
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR204916_chrX_1.fastq.gz -2
</span></span><span class="line"><span class="cl">chrX_data/samples/ERR204916_chrX_2.fastq.gz -S ERR204916_chrX.sam</span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>将SAM文件分类并转换为BAM文件。</li>
</ol>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ samtools sort -@ 8 -o ERR188044_chrX.bam ERR188044_chrX.sam
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 -o ERR188104_chrX.bam ERR188104_chrX.sam
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 -o ERR188234_chrX.bam ERR188234_chrX.sam
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 -o ERR188245_chrX.bam ERR188245_chrX.sam
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 -o ERR188257_chrX.bam ERR188257_chrX.sam
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 -o ERR188273_chrX.bam ERR188273_chrX.sam
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 -o ERR188337_chrX.bam ERR188337_chrX.sam
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 -o ERR188383_chrX.bam ERR188383_chrX.sam
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 -o ERR188401_chrX.bam ERR188401_chrX.sam
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 -o ERR188428_chrX.bam ERR188428_chrX.sam
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 -o ERR188454_chrX.bam ERR188454_chrX.sam
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 -o ERR204916_chrX.bam ERR204916_chrX.sam</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>上述命令适用于SAMtools
1.3版或更新的版本。对于旧版本的SAMtools，用户应该参考Box3。</p>
</blockquote>
<p>- Box3 | 使用SAMtools 1.2.1版及以上版本对SAM文件进行分类和转换</p>
<blockquote>
<p>最近版本的SAMtools可以在一个步骤中把SAM文件转换成BAM文件。对于使用旧版本的人来说，需要两个步骤。如图所示。</p>
</blockquote>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Convert SAM files to binary BAM files:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ samtools view -bS ERR188044_chrX.sam &gt;ERR188044_chrX_unsorted.bam
</span></span><span class="line"><span class="cl">$ samtools view -bS ERR188104_chrX.sam &gt;ERR188104_chrX_unsorted.bam
</span></span><span class="line"><span class="cl">$ samtools view -bS ERR188234_chrX.sam &gt;ERR188234_chrX_unsorted.bam
</span></span><span class="line"><span class="cl">$ samtools view -bS ERR188245_chrX.sam &gt;ERR188245_chrX_unsorted.bam
</span></span><span class="line"><span class="cl">$ samtools view -bS ERR188257_chrX.sam &gt;ERR188257_chrX_unsorted.bam
</span></span><span class="line"><span class="cl">$ samtools view -bS ERR188273_chrX.sam &gt;ERR188273_chrX_unsorted.bam
</span></span><span class="line"><span class="cl">$ samtools view -bS ERR188337_chrX.sam &gt;ERR188337_chrX_unsorted.bam
</span></span><span class="line"><span class="cl">$ samtools view -bS ERR188383_chrX.sam &gt;ERR188383_chrX_unsorted.bam
</span></span><span class="line"><span class="cl">$ samtools view -bS ERR188401_chrX.sam &gt;ERR188401_chrX_unsorted.bam
</span></span><span class="line"><span class="cl">$ samtools view -bS ERR188428_chrX.sam &gt;ERR188428_chrX_unsorted.bam
</span></span><span class="line"><span class="cl">$ samtools view -bS ERR188454_chrX.sam &gt;ERR188454_chrX_unsorted.bam
</span></span><span class="line"><span class="cl">$ samtools view -bS ERR204916_chrX.sam &gt;ERR204916_chrX_unsorted.bam
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Sort the BAM files:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 ERR188044_chrX_unsorted.bam ERR188044_chrX
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 ERR188104_chrX_unsorted.bam ERR188104_chrX
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 ERR188234_chrX_unsorted.bam ERR188234_chrX
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 ERR188245_chrX_unsorted.bam ERR188245_chrX
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 ERR188257_chrX_unsorted.bam ERR188257_chrX
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 ERR188273_chrX_unsorted.bam ERR188273_chrX
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 ERR188337_chrX_unsorted.bam ERR188337_chrX
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 ERR188383_chrX_unsorted.bam ERR188383_chrX
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 ERR188401_chrX_unsorted.bam ERR188401_chrX
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 ERR188428_chrX_unsorted.bam ERR188428_chrX
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 ERR188454_chrX_unsorted.bam ERR188454_chrX
</span></span><span class="line"><span class="cl">$ samtools sort -@ 8 ERR204916_chrX_unsorted.bam ERR204916_chrX
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">// Optionally, the user might want to delete temporary files:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ rm *.sam *unsorted.bam </span></span></code></pre></td></tr></table>
</div>
</div><h5 id="组装和量化表达的基因和转录物--时间15分钟">组装和量化表达的基因和转录物 ● 时间~15分钟</h5>
<ol>
<li>为每个样本组装转录本</li>
</ol>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ stringtie -p 8 -G chrX_data/genes/chrX.gtf -o
</span></span><span class="line"><span class="cl">ERR188044_chrX.gtf –l ERR188044 ERR188044_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie -p 8 -G chrX_data/genes/chrX.gtf -o
</span></span><span class="line"><span class="cl">ERR188104_chrX.gtf –l ERR188104 ERR188104_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie -p 8 -G chrX_data/genes/chrX.gtf -o
</span></span><span class="line"><span class="cl">ERR188234_chrX.gtf –l ERR188234 ERR188234_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie -p 8 -G chrX_data/genes/chrX.gtf -o
</span></span><span class="line"><span class="cl">ERR188245_chrX.gtf –l ERR188245 ERR188245_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie -p 8 -G chrX_data/genes/chrX.gtf -o
</span></span><span class="line"><span class="cl">ERR188257_chrX.gtf –l ERR188257 ERR188257_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie -p 8 -G chrX_data/genes/chrX.gtf -o
</span></span><span class="line"><span class="cl">ERR188273_chrX.gtf –l ERR188273 ERR188273_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie -p 8 -G chrX_data/genes/chrX.gtf -o
</span></span><span class="line"><span class="cl">ERR188337_chrX.gtf –l ERR188337 ERR188337_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie -p 8 -G chrX_data/genes/chrX.gtf -o
</span></span><span class="line"><span class="cl">ERR188383_chrX.gtf –l ERR188383 ERR188383_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie -p 8 -G chrX_data/genes/chrX.gtf -o
</span></span><span class="line"><span class="cl">ERR188401_chrX.gtf –l ERR188401 ERR188401_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie -p 8 -G chrX_data/genes/chrX.gtf -o
</span></span><span class="line"><span class="cl">ERR188428_chrX.gtf –l ERR188428 ERR188428_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie -p 8 -G chrX_data/genes/chrX.gtf -o
</span></span><span class="line"><span class="cl">ERR188454_chrX.gtf –l ERR188454 ERR188454_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie -p 8 -G chrX_data/genes/chrX.gtf -o
</span></span><span class="line"><span class="cl">ERR204916_chrX.gtf –l ERR204916 ERR204916_chrX.bam</span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>合并所有样本的转录本</li>
</ol>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ stringtie --merge -p 8 -G chrX_data/genes/chrX.gtf -o stringtie_merged.gtf chrX_data/mergelist.txt</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>错误排除</li>
</ul>
<blockquote>
<p>这里mergelist.txt是一个文本文件，其中有上一步创建的基因转移格式（GTF）文件的名称，每个文件的名称在一行中（参见ChrX_data的例子文件）。如果你不在所有GTF文件所在的同一目录下运行StringTie，那么你可能需要在mergelist.txt中的每个GTF文件名中包括其完整路径。使用任何文本编辑器来创建或编辑（纯文本）mergelist.txt文件。</p>
</blockquote>
<ol>
<li>检查转录本与参考注释的对比情况（可选）</li>
</ol>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ gffcompare –r chrX_data/genes/chrX.gtf –G –o merged stringtie_merged.gtf</span></span></code></pre></td></tr></table>
</div>
</div><p>选项-o指定了gffcompare将创建的输出文件的前缀。上面的命令将生成多个文件，在<em>gffcompare</em>文档中作了解释；更多细节见<strong>BOX1</strong>。</p>
<ol>
<li>估计转录物丰度，并为Ballgown创建表格计数</li>
</ol>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ stringtie –e –B -p 8 -G stringtie_merged.gtf -o
</span></span><span class="line"><span class="cl">ballgown/ERR188044/ERR188044_chrX.gtf ERR188044_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie –e –B -p 8 -G stringtie_merged.gtf -o
</span></span><span class="line"><span class="cl">ballgown/ERR188104/ERR188104_chrX.gtf ERR188104_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie –e –B -p 8 -G stringtie_merged.gtf -o
</span></span><span class="line"><span class="cl">ballgown/ERR188234/ERR188234_chrX.gtf ERR188234_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie –e –B -p 8 -G stringtie_merged.gtf -o
</span></span><span class="line"><span class="cl">ballgown/ERR188245/ERR188245_chrX.gtf ERR188245_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie –e –B -p 8 -G stringtie_merged.gtf -o
</span></span><span class="line"><span class="cl">ballgown/ERR188257/ERR188257_chrX.gtf ERR188257_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie –e –B -p 8 -G stringtie_merged.gtf -o
</span></span><span class="line"><span class="cl">ballgown/ERR188273/ERR188273_chrX.gtf ERR188273_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie –e –B -p 8 -G stringtie_merged.gtf -o
</span></span><span class="line"><span class="cl">ballgown/ERR188337/ERR188337_chrX.gtf ERR188337_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie –e –B -p 8 -G stringtie_merged.gtf -o
</span></span><span class="line"><span class="cl">ballgown/ERR188383/ERR188383_chrX.gtf ERR188383_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie –e –B -p 8 -G stringtie_merged.gtf -o
</span></span><span class="line"><span class="cl">ballgown/ERR188401/ERR188401_chrX.gtf ERR188401_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie –e –B -p 8 -G stringtie_merged.gtf -o
</span></span><span class="line"><span class="cl">ballgown/ERR188428/ERR188428_chrX.gtf ERR188428_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie –e –B -p 8 -G stringtie_merged.gtf -o
</span></span><span class="line"><span class="cl">ballgown/ERR188454/ERR188454_chrX.gtf ERR188454_chrX.bam
</span></span><span class="line"><span class="cl">$ stringtie –e –B -p 8 -G stringtie_merged.gtf -o
</span></span><span class="line"><span class="cl">ballgown/ERR204916/ERR204916_chrX.gtf ERR204916_chrX.bam</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="运行差异化表达分析协议--时间5分钟">运行差异化表达分析协议 ● 时间~5分钟</h5>
<ol>
<li>加载相关的R包。这些包包括你将用于执行大部分分析的Ballgown包，以及其他一些有助于这些分析的包，特别是<strong>RSkittleBrewer</strong>（用于设置颜色）、<strong>genefilter</strong>（用于快速计算平均值和变异值）、<strong>dplyr</strong>（用于排序和排列结果）和<strong>devtools</strong>（用于重现性和安装软件包）。</li>
</ol>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ R
</span></span><span class="line"><span class="cl">R version 3.2.2 (2015-08-14) -- &#34;Fire Safety&#34;
</span></span><span class="line"><span class="cl">Copyright (C) 2015 The R Foundation for Statistical Computing
</span></span><span class="line"><span class="cl">Platform: x86_64-apple-darwin13.4.0 (64-bit)
</span></span><span class="line"><span class="cl">&gt;library(ballgown)
</span></span><span class="line"><span class="cl">&gt;library(RSkittleBrewer)
</span></span><span class="line"><span class="cl">&gt;library(genefilter)
</span></span><span class="line"><span class="cl">&gt;library(dplyr)
</span></span><span class="line"><span class="cl">&gt;library(devtools)</span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>加载样本的表型数据。一个名为geuvadis_phenodata.csv的示例文件包括在该协议的数据文件中（ChrX_data）。一般来说，你将不得不自己创建这个文件。它包含了关于你的RNA-seq样本的信息，格式如这个csv（逗号分隔的值）文件中所示。文件中的每一行包含每个样本的描述，每一列应该包含一个变量。为了将这个文件读入R，我们使用read.csv命令。在这个文件中，数值是由逗号分隔的，但如果文件是以制表符分隔的，你可以使用函数read.table。</li>
</ol>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&gt;pheno_data = read.csv(&#34;geuvadis_phenodata.csv&#34;)</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>错误排除</li>
</ul>
<ol>
<li>读入由StringTie计算的表达数据。Ballgown目前也支持从Cufflinks6和RSEM17读取数据。要做到这一点，我们使用带有以下三个参数的ballgown命令：存储数据的目录（dataDir，这里简单命名为&rsquo;Ballgown&rsquo;），出现在样本名称中的模式（samplePattern）和我们在前一步加载的表型信息（pData）。请注意，一旦创建了Ballgown对象，任何其他Bioconductor32软件包都可以应用于数据分析或数据可视化。这里我们提出了一个标准化的流程，可以用来进行标准的差异表达分析。</li>
</ol>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&gt;bg_chrX = ballgown(dataDir = &#34;ballgown&#34;, samplePattern = &#34;ERR&#34;, pData=pheno_data)</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>错误排除</li>
</ul>
<ol>
<li>使用筛选器去除低丰度基因。RNA-seq数据的一个常见问题是，某些基因经常有非常少的计数或零计数。一个常见的步骤是过滤掉其中的一些。另一种被用于基因表达分析的方法是应用一个方差过滤器。在这里，我们删除所有跨样本方差小于1的转录本。</li>
</ol>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&gt;bg_chrX_filt = subset(bg_chrX,&#34;rowVars(texpr(bg_chrX)) &gt;1&#34;,genomesubset=TRUE)</span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>识别在统计学上显示组间差异的转录本。我们可能想做的一件事是确保我们考虑到其他变量引起的表达变化。作为一个例子，我们将寻找在性别间有差异表达的转录本，同时校正由于群体变量造成的任何表达差异。我们可以使用Ballgown的stattest函数来做这件事。我们设置了<strong>getFC=TRUE</strong>参数，这样我们就可以查看两组之间经混杂因素调整后的折叠变化。
请注意，Ballgown的统计测试是一个基于标准线性模型的比较。对于小样本量（每组n&lt;4），通常最好进行正则化。这可以用<em>Bioconductor</em>中的limma包来完成。其他正则化方法，如DESeq和edgeR可以应用于基因或外显子计数，但它们不适合直接应用于FPKM丰度估计。统计测试使用累积的上四分位数规范化(<em>cumulative
upper quartile normalization</em>)。</li>
</ol>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&gt;results_transcripts = stattest(bg_chrX_filt,
</span></span><span class="line"><span class="cl">feature=&#34;transcript&#34;,covariate=&#34;sex&#34;,adjustvars = c(&#34;population&#34;), 
</span></span><span class="line"><span class="cl">getFC=TRUE, meas=&#34;FPKM&#34;)</span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>识别组间有统计学差异的基因。为此，我们可以运行与识别差异表达的转录本相同的函数，在这里我们在stattest命令中设置feature=&ldquo;gene&rdquo;</li>
</ol>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&gt;results_genes = stattest(bg_chrX_filt, feature=&#34;gene&#34;,
</span></span><span class="line"><span class="cl">covariate=&#34;sex&#34;, adjustvars = c(&#34;population&#34;), getFC=TRUE,
</span></span><span class="line"><span class="cl">meas=&#34;FPKM&#34;)</span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>在results_transcripts数据框中添加基因名称和基因ID</li>
</ol>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&gt;results_transcripts =
</span></span><span class="line"><span class="cl">data.frame(geneNames=ballgown::geneNames(bg_chrX_filt),
</span></span><span class="line"><span class="cl">geneIDs=ballgown::geneIDs(bg_chrX_filt), results_transcripts)</span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>将结果从最小的P值排序到最大</li>
</ol>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&gt;results_transcripts = arrange(results_transcripts,pval)
</span></span><span class="line"><span class="cl">&gt;results_genes = arrange(results_genes,pval)</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>两性之间差异表达的转录物（q值&lt;5%） 基因名|基因ID|转录本名|ID|Fold
Change|P值|q值 :&ndash;:|:&ndash;:|:&ndash;:|:&ndash;:|:&ndash;:|:&ndash;:|:&ndash;: XIST
MSTRG.506|NR_001564|1729|0.003255|7.0447e-10|1.6160e-06
|MSTRG.506|MSTRG.506.1|1728|0.016396|1.2501e-08|1.4339e-05
TSIX|MSTRG.505|NR_003255|1726|0.083758|2.4939e-06|1.9070e-03
|MSTRG.506|MSTRG.506.2|1727|0.047965|3.7175e-06|2.1319e-03
|MSTRG.585|MSTRG.585.1|1919|7.318925|9.3945e-06|3.7715e-03
PNPLA4|MSTRG.56|NM_004650|203|0.466647|9.8645e-06|3.7715e-03
|MSTRG.506|MSTRG.506.5|1731|0.046993|2.1350e-05|6.9968e-03
|MSTRG.592|MSTRG.592.1|1923|9.186257|3.5077e-05|1.0058e-02
|MSTRG.518|MSTRG.518.1|1744|11.972859|4.4476e-05|1.1336e-02</li>
</ul>
<blockquote>
<p>Fold
Change是指女性与男性的表达比例；因此，低于1的数值意味着转录物在男性中的表达水平较低。</p>
</blockquote>
<ol>
<li>将结果写入一个可以共享和分发的csv文件</li>
</ol>
<div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&gt;write.csv(results_transcripts, &#34;chrX_transcript_results.csv&#34;,
</span></span><span class="line"><span class="cl">row.names=FALSE)
</span></span><span class="line"><span class="cl">&gt;write.csv(results_genes, &#34;chrX_gene_results.csv&#34;,
</span></span><span class="line"><span class="cl">row.names=FALSE) </span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>识别q值&lt;0.05的转录物和基因</li>
</ol>
<div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&gt;subset(results_transcripts,results_transcripts$qval&lt;0.05)
</span></span><span class="line"><span class="cl">&gt;subset(results_genes,results_genes$qval&lt;0.05)</span></span></code></pre></td></tr></table>
</div>
</div><p>每个命令的Ballgown输出都会出现在屏幕上；我们在下面的<strong>Table3</strong>（转录物）和<strong>Table4</strong>（基因）中显示了结果。如表所示，X号染色体有9个转录本在两性之间有差异表达（使用q值阈值为0.05），其中3个对应于已知基因的异构体（XIST、TSIX和PNPLA4）。在基因水平上（表4），X染色体在相同的q值临界点上有10个差异表达的基因。(如果使用不同版本的程序，这些表格可能包含略有不同的结果）。</p>
<ul>
<li>
<p>错误排除</p>
</li>
<li>
<p>错误排除</p>
</li>
<li>
<p>错误排除</p>
</li>
</ul>
]]></description>
</item>
<item>
  <title>使用HISAT StringTie和Ballgown进行的转录本表达水平分析（中译）(三)</title>
  <link>https://flatig.vip/posts/%E4%BD%BF%E7%94%A8hisat-stringtie%E5%92%8Cballgown%E8%BF%9B%E8%A1%8C%E7%9A%84%E8%BD%AC%E5%BD%95%E6%9C%AC%E8%A1%A8%E8%BE%BE%E6%B0%B4%E5%B9%B3%E5%88%86%E6%9E%90%E4%B8%AD%E8%AF%91%E4%B8%89/</link>
  <pubDate>Sat, 12 Mar 2022 11:47:17 &#43;0000</pubDate>
  <author>flatig</author>
  <guid>https://flatig.vip/posts/%E4%BD%BF%E7%94%A8hisat-stringtie%E5%92%8Cballgown%E8%BF%9B%E8%A1%8C%E7%9A%84%E8%BD%AC%E5%BD%95%E6%9C%AC%E8%A1%A8%E8%BE%BE%E6%B0%B4%E5%B9%B3%E5%88%86%E6%9E%90%E4%B8%AD%E8%AF%91%E4%B8%89/</guid>
  <description><![CDATA[<h3 id="材料">材料</h3>
<h5 id="配置">配置</h5>
<ul>
<li>数据（本方案中使用的RNA-seq reads、索引和基因注释的例子可在<a href="ftp://ftp.ccb.jhu.edu/pub/RNAseq_protocol"target="_blank" rel="external nofollow noopener noreferrer">链接<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>；详情见设备设置）</li>
<li>HISAT2软件（<a href="http://ccb.jhu.edu/software/hisat2"target="_blank" rel="external nofollow noopener noreferrer">链接1<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>或<a href="http://github.com/infphilo/hisat2"target="_blank" rel="external nofollow noopener noreferrer">链接2<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>），2.0.1或更高版本</li>
<li>StringTie软件(<a href="http://ccb.jhu.edu/software/stringtie"target="_blank" rel="external nofollow noopener noreferrer">链接1<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>或<a href="https://github.com/gpertea/stringtie"target="_blank" rel="external nofollow noopener noreferrer">链接2<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>,  1.2.2 或更高版本)</li>
<li>SAMtools （<a href="http://samtools.sourceforge.net"target="_blank" rel="external nofollow noopener noreferrer">链接<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>, 版本0.1.19或更高)</li>
<li>R（<a href="https://www.r-project.org"target="_blank" rel="external nofollow noopener noreferrer">链接<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>，版本3.2.2或更高）。</li>
<li>硬件（64位计算机，运行Linux或Mac OS X（10.7 Lion或更高版本）；4GB内存（最好是8GB）；见<strong>设备设置</strong>)</li>
</ul>
<h5 id="设备配置">设备配置</h5>
<h6 id="所需的数据">所需的数据</h6>
<p>该协议用一个来自智人X染色体的例子实验来说明，你可以通过分析来熟悉全套软件。你需要的所有数据都可以在文件<strong>chrX_data.tar.gz</strong>中找到，该文件将在下面说明。要使用HISAT2和StringTie进行基因表达分析，你必须使用一个基因组已被测序的生物体。这两个工具也可以使用基因和转录物的注释文件，尽管这是可选的。HISAT2需要一个基因组的索引，这在数据下载文件中提供。在HISAT2网站上可以找到其他多个物种的预建索引。在没有可用索引的情况下，<strong>Box2</strong>提供了如何创建一个HISAT2索引的说明。</p>
<blockquote>
<p>重要提醒 协议中使用的命令都应该从Unix shell提示下的终端窗口运行，直到在R环境中进行差异表达式分析。我们鼓励用户创建一个单一的目录（例如，&ldquo;my_rnaseq_exp&rdquo;），在其中存储所有的例子数据和分析所创建的文件。所有的命令都是在假设用户是在这个目录下工作的情况下描述的。该协议还包括在R统计计算环境中运行的小部分代码。拟在Unix shell（如bash或csh）中执行的命令以&quot;$&ldquo;字符为前缀。要从R脚本或R交互式shell中运行的命令前缀为&rdquo;&gt;&ldquo;字符。</p>
</blockquote>
<ul>
<li>Box2 | 创建HISAT2索引文件
<blockquote>
<p>人类基因组和许多模式生物的预建HISAT2索引可以从HISAT网站下载。如果所需的索引不在那里，用户可能需要建立一个自定义的索引。这里我们描述了如何为人类X号染色体建立索引；要为其他基因组建立索引，应该用对应于该基因组及其注释的文件分别替换基因组文件CHRX.FA和注释文件CHRX.gtf。
首先，使用HISAT2软件包中的python脚本，从基因注释文件中提取剪接位点和外显子信息(Line:01,02)，然后再创建一个索引。</p>
</blockquote>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ extract_splice_sites.py chrX_data/genes/chrX.gtf &gt;chrX.ss
</span></span><span class="line"><span class="cl">$ extract_exons.py chrX_data/genes/chrX.gtf &gt;chrX.exon
</span></span><span class="line"><span class="cl">$ hisat2-build --ss chrX.ss --exon chrX.exon chrX_data/genome/chrX.fa chrX_tran</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>如果没有注释，上述命令中的&ndash;ss和&ndash;exon选项可以省略。请注意，建立索引的步骤比对齐步骤需要更多的内存，而且可能无法在台式电脑上执行。例如，为X染色体建立索引需要9GB内存，为整个人类基因组建立索引需要160GB内存。如果省略注释信息，内存量要小得多。使用一个CPU核心对X染色体进行索引 需要&lt;10分钟。使用8个CPU核为整个人类基因组建立索引应该需要2小时。</p>
</blockquote>
</li>
</ul>
<h6 id="下载和整理所需数据">下载和整理所需数据</h6>
<p>解压数据文件并检查内容</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ tar xvzf chrX_data.tar.gz</span></span></code></pre></td></tr></table>
</div>
</div><p>假设我们将数据存储在my_rnaseq_exp/，软件包解压后包含一个chrX_data/文件夹，其结构如下：<em>samples/ indexes/ genome/ genes/</em>（包含四个目录）。</p>
<p>样本目录包含12个样本的成对端RNA-seq reads(<em>paired-end RNA-seq reads</em>)，其中6个样本来自两个人群，GBR（来自英格兰的英国人）和YRI（来自尼日利亚伊巴丹的约鲁巴人）。每个人群都有三个样本，分别来自男性和女性受试者（每个样本的人口和性别见<strong>Table2</strong>）。</p>
<ul>
<li>Table2|协议中使用的样本
<table>
<thead>
<tr>
<th style="text-align:center">样本ID</th>
<th style="text-align:center">性别</th>
<th style="text-align:center">人群</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ERR188245</td>
<td style="text-align:center">Female</td>
<td style="text-align:center">GBR</td>
</tr>
<tr>
<td style="text-align:center">ERR188428</td>
<td style="text-align:center">Female</td>
<td style="text-align:center">GBR</td>
</tr>
<tr>
<td style="text-align:center">ERR188337</td>
<td style="text-align:center">Female</td>
<td style="text-align:center">GBR</td>
</tr>
<tr>
<td style="text-align:center">ERR188401</td>
<td style="text-align:center">Male</td>
<td style="text-align:center">GBR</td>
</tr>
<tr>
<td style="text-align:center">ERR188257</td>
<td style="text-align:center">Male</td>
<td style="text-align:center">GBR</td>
</tr>
<tr>
<td style="text-align:center">ERR188383</td>
<td style="text-align:center">Male</td>
<td style="text-align:center">GBR</td>
</tr>
<tr>
<td style="text-align:center">ERR204916</td>
<td style="text-align:center">Female</td>
<td style="text-align:center">YRI</td>
</tr>
<tr>
<td style="text-align:center">ERR188234</td>
<td style="text-align:center">Female</td>
<td style="text-align:center">YRI</td>
</tr>
<tr>
<td style="text-align:center">ERR188273</td>
<td style="text-align:center">Female</td>
<td style="text-align:center">YRI</td>
</tr>
<tr>
<td style="text-align:center">ERR188454</td>
<td style="text-align:center">Male</td>
<td style="text-align:center">YRI</td>
</tr>
<tr>
<td style="text-align:center">ERR188104</td>
<td style="text-align:center">Male</td>
<td style="text-align:center">YRI</td>
</tr>
<tr>
<td style="text-align:center">ERR188044</td>
<td style="text-align:center">Male</td>
<td style="text-align:center">YRI</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>所有的序列都是压缩的&rsquo;fastq&rsquo;格式，它将每个read存储为四行。每个样本依次包含在两个文件中：一个是read 1，另一个是read 2。因此，例如，样本<em>ERR188245</em>包含在文件<em>ERR188245_ chrX_1.fastq.gz</em>和<em>ERR188245_chrX_2.fastq.gz</em>中，每个文件包含 <em>855,983</em>条reads。请注意，原始数据文件包含映射到整个基因组的<em>reads</em>，而不仅仅是X染色体，这些文件大约要大25倍。如果读者有兴趣，可以在<a href="ftp://ftp.ccb.jhu.edu/pub/RNAseq_protocol"target="_blank" rel="external nofollow noopener noreferrer">链接<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>下的README文件查看关于下载完整数据集的说明。请注意，HISAT2还提供了一个选项，称为-sra-acc，可以通过互联网直接使用<strong>NCBI序列</strong>阅读档案（SRA）数据。这消除了手动下载<em>SRA reads</em>并将其转换为fasta/fastq格式的需要，却不会显著影响到运行时间。例如，下面的HISAT2命令将下载并对齐本协议中使用的12个样本中的1个（<em>ERR188245</em>）。</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ hisat2 -p 8 --dta -x chrX_data/indexes/chrX_tran --sra-acc ERR188245 –S ERR188245_chrX.sam</span></span></code></pre></td></tr></table>
</div>
</div><p>indexes目录包含X染色体的HISAT2索引，包括<em>chrX_tran.1.ht2, chrX_tran.2.ht2, chrX_tran.3.ht2, chrX_tran.4.ht2
chrX_tran.5.ht2, chrX_tran.6.ht2, chrX_tran.7.ht2 和 chrX_tran.8.ht2</em>.</p>
<p>基因组目录包含一个文件<em>chrX.fa</em>，它是人类X染色体的序列（<em>GRCh38 build 81</em>）。注意，如果你使用的是全基因组，这个目录将有一个包含所有染色体的文件。基因目录包含一个 <em>chrX.gtf</em>，它存储你了来自RefSeq数据库的GRCh38的人类基因注释。
chrX_data目录还包含另外两个文件：<em>mergelist.txt</em>和<em>geuvadis_phenodata.csv</em>。这些文件是运行这个协议必须的文本文件，如下文所述。通常情况下，你会自己用文本编辑器创建这些文件，但我们在这里提供它们作为例子。</p>
<h6 id="下载安装软件">下载安装软件</h6>
<p>先创建一个目录来存储本协议中使用的所有的程序（如果还没有）</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ mkdir $HOME/bin</span></span></code></pre></td></tr></table>
</div>
</div><p>将上述目录添加到你的PATH环境变量中</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ export PATH=$HOME/bin:$PATH</span></span></code></pre></td></tr></table>
</div>
</div><p>要安装SAMtools，请从<a href="http://samtools.sourceforge.net"target="_blank" rel="external nofollow noopener noreferrer">链接<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>下载，解压<em>SAMtools tar</em>文件，然后cd到SAMtools源目录（该协议将适用于从0.1.19开始的所有SAMtools版本）。</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ tar jxvf samtools-0.1.19.tar.bz2
</span></span><span class="line"><span class="cl">$ cd samtools-0.1.19
</span></span><span class="line"><span class="cl">$ make
</span></span><span class="line"><span class="cl">$ cd .
</span></span><span class="line"><span class="cl">// Copy the samtools binary to a directory in your PATH:
</span></span><span class="line"><span class="cl">$ cp samtools-0.1.19/samtools $HOME/bin</span></span></code></pre></td></tr></table>
</div>
</div><p>要安装HISAT2，请从<a href="http://ccb.jhu.edu/software/hisat2"target="_blank" rel="external nofollow noopener noreferrer">链接1<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>或<a href="http://github.com/infphilo/hisat2"target="_blank" rel="external nofollow noopener noreferrer">链接2<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>，下载最新的二进制程序包，解压HISAT2的压缩包，并cd到解压后的目录。</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ unzip hisat2-2.0.1-beta-OSX_x86_64.zip</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来，将HISAT2的可执行文件复制到你的PATH中的一个目录。</p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ cp hisat2-2.0.1-beta/hisat2* hisat2-2.0.1-beta/*.py $HOME/bin</span></span></code></pre></td></tr></table>
</div>
</div><p>要安装StringTie，请从<a href="http://ccb.jhu.edu/software/stringtie"target="_blank" rel="external nofollow noopener noreferrer">链接<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>，下载最新的二进制包，解压StringTie tar文件，然后cd到解压后的目录。</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ tar xvzf stringtie-1.2.2.OSX_x86_64.tar.gz</span></span></code></pre></td></tr></table>
</div>
</div><p>(注意，这个指令使用了Mac OS X的可执行文件。如果你使用的是Linux，可以用这个可执行文件代替：stringtie-1.2.2.Linux_x86_64.tar.gz）。接下来，将StringTie包的可执行文件复制到你的PATH中的某个目录。</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ cp stringtie-1.2.2.OSX_x86_64/stringtie $HOME/bin</span></span></code></pre></td></tr></table>
</div>
</div><p>StringTie也可以从<a href="https://github.com/gpertea/stringtie"target="_blank" rel="external nofollow noopener noreferrer">链接<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>下载。要安装<em>gffcompare</em>，请从以下网站下载最新的二进制软件包<a href="http://github.com/gpertea/gffcompare"target="_blank" rel="external nofollow noopener noreferrer">链接<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>，并按照 <em>README.md</em>文件中的说明。要安装Ballgown，请先启动R语言会话界面。</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ R
</span></span><span class="line"><span class="cl">R version 3.2.2 (2015-08-14) -- &#34;Fire Safety&#34;
</span></span><span class="line"><span class="cl">Copyright (C) 2015 The R Foundation for
</span></span><span class="line"><span class="cl">Statistical Computing
</span></span><span class="line"><span class="cl">Platform: x86_64-apple-darwin13.4.0 (64-bit)</span></span></code></pre></td></tr></table>
</div>
</div><p>&lsquo;&gt;&lsquo;前的文本为R的介绍信息结束。安装 <strong>Ballgown</strong>软件包和其他R的依赖项，如下所示。</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&gt;install.packages(&#34;devtools&#34;,repos=&#34;http://cran.us.r-project.org&#34;)
</span></span><span class="line"><span class="cl">&gt;source(&#34;http://www.bioconductor.org/biocLite.R&#34;)
</span></span><span class="line"><span class="cl">&gt;biocLite(c(&#34;alyssafrazee/RSkittleBrewer&#34;,&#34;ballgown&#34;,&#34;genefilter&#34;,&#34;dplyr&#34;,&#34;devtools&#34;))</span></span></code></pre></td></tr></table>
</div>
</div><p>运行本协议需要Bioconductor 3.0或更高版本，以及R 3.1版本。补充软件包括一个shell脚本和其他依赖文件，可以用来运行本协议的所有步骤。还包括一个README文件，解释了如何运行该脚本。这些文件也可以从<a href="ftp://ftp.ccb.jhu.edu/pub/RNAseq_protocol"target="_blank" rel="external nofollow noopener noreferrer">链接<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>获取。</p>
]]></description>
</item>
<item>
  <title>使用HISAT StringTie和Ballgown进行的转录本表达水平分析（中译）(二)</title>
  <link>https://flatig.vip/posts/%E4%BD%BF%E7%94%A8hisat-stringtie%E5%92%8Cballgown%E8%BF%9B%E8%A1%8C%E7%9A%84%E8%BD%AC%E5%BD%95%E6%9C%AC%E8%A1%A8%E8%BE%BE%E6%B0%B4%E5%B9%B3%E5%88%86%E6%9E%90%E4%B8%AD%E8%AF%91%E4%BA%8C/</link>
  <pubDate>Wed, 09 Mar 2022 10:10:49 &#43;0000</pubDate>
  <author>flatig</author>
  <guid>https://flatig.vip/posts/%E4%BD%BF%E7%94%A8hisat-stringtie%E5%92%8Cballgown%E8%BF%9B%E8%A1%8C%E7%9A%84%E8%BD%AC%E5%BD%95%E6%9C%AC%E8%A1%A8%E8%BE%BE%E6%B0%B4%E5%B9%B3%E5%88%86%E6%9E%90%E4%B8%AD%E8%AF%91%E4%BA%8C/</guid>
  <description><![CDATA[<h3 id="实验设计">实验设计</h3>
<h5 id="用hisat进行reads比对">用HISAT进行reads比对</h5>
<p>RNA-seq分析开始时，将<em>reads</em>与参考基因组进行映射，以确定其基因组位置。这种映射信息使我们能够收集每个基因对应的<em>reads</em>子集，然后进行组装，并对这些<em>reads</em>所代表的转录本进行量化。已经开发了几种将<em>reads</em>与基因组对齐的快速算法，其中<strong>Bowtie</strong>和<strong>Burrows-Wheeler</strong>对齐法(<em>Burrows–Wheeler aligner, BWA</em>)是最广泛使用的算法之一。这两种方法都使用一种叫做Burrows-Wheeler变换（<strong>Burrows–Wheeler transform, BWT</strong>）的数据结构。它以高度压缩的形式存储参考基因组。通过使用一个特殊的，称为费拉吉娜-曼奇尼（FM）索引的方式，这些程序可以极其迅速地搜索基因组，其比对速度以每小时数百万个<em>reads</em>计算。
RNA-seq映射器（<em>mapper</em>）需要解决一个额外的问题，它不存在于在纯DNA比对中：许多RNA-seq 产生的<em>reads</em>将横跨内含子。RNA-seq流程捕获并测序成熟的mRNA分子进行，其中内含子已被剪接去除。因此，一个短的<em>reads</em>可能与相隔<strong>10,000 bp</strong>或更多的两个位置对齐（人类内含子的平均长度为 &gt;6,000 bp ，一些内含子的长度为&gt;1 Mbp）。对于一个典型的使用100bp <em>reads</em>的人类RNA-seq数据集，&gt;35%的<em>reads</em>将跨越多个外显子。对齐这些跨外显子的<em>reads</em>比对齐一个外显子内的<em>reads</em>要困难得多。
<strong>HISAT</strong>使用两种类型的索引（<em>index</em>）进行比对：一个全局的全基因组索引和数以万计的小型局部索引。这两种类型的索引都是使用与<em>Bowtie2</em>相同的<strong>BWT/FM</strong>索引构建的。而HISAT系统甚至使用了一些<em>Bowtie2</em>的代码。由于使用了这些高效的数据结构和算法，HISAT生成拼接排列的速度比Bowtie和BWA快了数倍，而使用的内存却只有Bowtie的两倍。HISAT是被设计为作为<strong>TopHat 和TopHat2</strong>（后者是由本协议的一些作者开发的）的继承者而设计的，具有兼容的输出，但它的运行速度是TopHat和TopHat2的<strong>50</strong>倍。快50倍。对于与人类基因组的比对，该索引需要 8千兆字节（GB）的内存，这使得它可以在传统的台式机上运行；一台电脑处理20个人类RNA-seq样本，每个样本有1亿个读数，应该需要<strong>不到一天时间</strong>。对于具有较小基因组的物种，内存和处理量的要求也会相应减少。在本协议中，我们使用了<strong>HISAT2</strong>，它包含了算法上的改进，产生了比原来的HISAT系统略高的准确性。
RNA-seq数据的比对可以用来检测新的<strong>剪接点、转录起始点和转录终止点</strong>。与TopHat一样，如果这些事件（<em>event</em>）存在于数据集（<em>data</em>）中，HISAT将检测所有这些事件。用户还可以提供基因注释文件，指定已知基因的位置，包括其所有的外显子和内含子边界。使用高质量的注释文件可以改善<strong>HISAT</strong>在已知基因附近的比对，但这种输入是可选的。</p>
<h5 id="用stringtie进行转录本组装和量化">用StringTie进行转录本组装和量化</h5>
<p>RNA-seq实验的分析需要准确重建每一个基因所表达的异构体，以及对这些异构体的相对丰度进行估计。因为注释仍然不完整，即使是对研究最深入的物种，如人类，我们也不能为我们的程序提供所有基因和所有异构体的完整列表。尽管如此，准确的量化得益于准确了解哪些<em>reads</em>来自于哪些异构体，由于<em>reads</em>比转录本短得多，所以无法完美计算。<strong>StringTie</strong>将RNA-seq <em>reads</em>中的转录本组装起来，这些<em>reads</em>已经与基因组进行了比对。首先将<em>reads</em>分组为不同的基因位点，然后将每个基因位点组装成不同的基因组。然后将每个基因座组装成所需数量的异构体来解释这些数据。<strong>StringTie</strong>使用一种网络流算法，从表达量最高的转录本开始，它同时对其进行组装和定量。然后删除与该转录本相关的<em>reads</em>，并重复这一过程，组装更多的异构体，直到所有的<em>reads</em>都被使用，或者直到剩余<em>reads</em>的数量低于设定的转录噪音（<em>transcriptional noise</em>）水平（用户可自行调整）。</p>
<p><strong>StringTie</strong>的网络流算法可以比以前的一些方法更准确地重建转录本，这是因为它同时计算丰度和外显子结构。该算法还具有计算运行效率，使它的运行速度比其前身<strong>Cufflinks</strong>快很多倍，而且使用的内存也少很多。大多数RNA-seq的运行可以由StringTie在只有<strong>8GB</strong>随机存取内存（RAM）的传统台式电脑上处理，甚至大型数据集也可以在<strong>一小时内</strong>运行。用户可以选择向StringTie提供一个包含参考基因模型的文件；这个注释文件包含 &ldquo;已知 &ldquo;基因的外显子结构说明，以及这些基因的名称。如果用户提供了这个注释文件，<strong>StringTie</strong>将使用它作为组装的指南，它也将用该文件中的名称来标记它组装的基因。注释对重建低丰度基因很有帮助，对于这些基因来说<em>reads</em>数量太少，无法准确组装。请注意，注释文件是可选的，StringTie会根据需要组装额外的、没有注释的基因来解释数据。在用StringTie组装转录本后，用户可以使用<strong>gffcompare</strong>工具（Box1；表1）来确定有多少组装的转录本与注释的基因完全或部分匹配，并计算出有多少基因是全新的。另外，用户可以跳过对新基因和转录本的组装，只用StringTie对注释文件中提供的所有转录本进行量化（图1）。</p>
<ul>
<li>
<p>Box1 | 将一组转录物与已知基因列表进行比较</p>
<blockquote>
<p>比较基因和转录物的清单首先要求清单的格式相同。许多生物信息学程序利用 GFF（<em>gene finding format</em>, 基因搜索格式）来表示基因和转录物。GFF是一种简单的以制表符分隔的文本格式，描述基因、转录本、外显子和内含子在基因组上的属性。StringTie使用GTF，它是GFF的一个特殊版本，包含一些额外的数据类型。<a href="http://www.ensembl.org/info/website/upload/gff.html"target="_blank" rel="external nofollow noopener noreferrer">详见此链接<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>
我们已经开发了gffcompare工具（可从<a href="http://ccb.jhu.edu/software/stringtie/gff.shtml"target="_blank" rel="external nofollow noopener noreferrer">JHU<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>或<a href="http://github.com/gpertea/gffcompare"target="_blank" rel="external nofollow noopener noreferrer">GitHub<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>下载）来比较一个或多个由StringTie产生的GTF文件和一个GFF或GTF的参考注释文件。假设StringTie的输出是transcripts.gtf，参考注释文件是chrX.gtf，可以用以下命令运行gffcompare软件。</p>
</blockquote>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ gffcompare –G –r chrX.gtf transcripts.gtf </span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>在-r选项之后是要用作参考的注释文件，而-G选项告诉gffcompare比较输入的transcripts.gtf文件中的所有转录本，尽管那些可能是多余的。
gffcompare程序是基于CuffCompare工具的，它是Cufflinks/Tuxedo套件的一部分，<a href="http://cole-trapnell-lab.github.io/cufflinks/cuffcompare"target="_blank" rel="external nofollow noopener noreferrer">CuffCompare手册<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>中记载的许多使用选项和输出结果也适用于gffcompare程序。所有由gffcompare生成的文件的前缀都是gffcmp，除非用户在 -o 选项中选择不同的前缀。当如上所示使用时，gffcompare会产生一个输出文件，称为gffcmp.annotated.gtf，它在每个转录本上添加一个 &ldquo;类代码&rdquo;（在表1中描述）和参考注释文件中的转录本名称。这使用户能够快速检查预测的转录本与注释文件的关系。这里显示的gffcompare命令还将在gffcmp.stats输出文件中计算不同基因特征（如外显子、内含子、转录本和基因）的灵敏度和精确度统计。敏感性被定义为正确重建的来自注释的基因的比例，而精确性（positive predictive value, 也被称为阳性预测值）捕捉到与注释重叠的输出的比例。因此，这两个衡量标准都是相对于输入注释而言的，可能不能完全反映出组装的基因和转录物的真正准确性。gffcmp.stats文件还包含其他几个衡量标准，如StringTie输出中包含的新外显子、内含子或基因的总数。</p>
</blockquote>
</li>
</ul>
<hr>
<ul>
<li>Table1 | 类别代码——用于描述转录本集合与参考注释的比较情况
<table>
<thead>
<tr>
<th style="text-align:center">Class Code</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:left">预测的转录本与参考转录本有完全相同的内含子</td>
</tr>
<tr>
<td style="text-align:center">c</td>
<td style="text-align:left">预测的转录本包含在参考转录本中</td>
</tr>
<tr>
<td style="text-align:center">j</td>
<td style="text-align:left">预测的转录本是一种潜在的新异构体，它与参考转录本至少有一个剪接结点</td>
</tr>
<tr>
<td style="text-align:center">e</td>
<td style="text-align:left">预测的单外显子转录本与一个参考外显子和一个参考内含子的至少10bp重叠，表明可能是前体mRNA（<em>possiblepre-mRNA</em>）片段</td>
</tr>
<tr>
<td style="text-align:center">i</td>
<td style="text-align:left">预测的转录本完全落在参考内含子中</td>
</tr>
<tr>
<td style="text-align:center">o</td>
<td style="text-align:left">预测转录本的外显子与参考转录本重合</td>
</tr>
<tr>
<td style="text-align:center">p</td>
<td style="text-align:left">预测的转录本位于参考转录本的2kb范围内（可能是聚合酶活跃的片段）</td>
</tr>
<tr>
<td style="text-align:center">r</td>
<td style="text-align:left">预测的转录本有&gt;50%的碱基与软屏蔽的<em>soft-masked</em>（重复的）参考序列重叠</td>
</tr>
<tr>
<td style="text-align:center">u</td>
<td style="text-align:left">与已知参考转录本相比，预测的转录本是基因间区（<em>intergenic</em>）的</td>
</tr>
<tr>
<td style="text-align:center">x</td>
<td style="text-align:left">预测转录本的外显子与参考文献重叠，但位于相反的链上</td>
</tr>
<tr>
<td style="text-align:center">s</td>
<td style="text-align:left">预测转录本的内含子与相反链上的参考内含子重叠</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>在包括此协议在内的大多数实验设计中，实验包括多个RNA-seq样本.存在于一个样本中的基因和异构体很少与存在于所有其他样本中的基因和异构体相同，但它们需要以一致的方式进行组装，以便可以进行比较。我们通过使用<strong>StringTie</strong>的合并功能将所有的装配合并在一起来解决这个问题，该功能合并了在全部样本中发现的所有基因。因此，在一个样本中由于缺乏覆盖率而缺少外显子的转录本可能会被<strong>恢复到它的全长</strong>；关于合并（<em>merging</em>）如何改善组装(<em>assemblies</em>)的说明，见<strong>图2</strong>。</p>
<p><a class="lightgallery" href="https://pic.imgdb.cn/item/622c17185baa1a80ab603a30.png" data-thumbnail="https://pic.imgdb.cn/item/622c17185baa1a80ab603a30.png" data-sub-html="<h2>图2</h2>"></a></p>
<blockquote>
<p>图2 | 使用StringTie的合并功能合并转录本组合。在这个例子中，来自四个不同样本的四个部分集合被合并成两个转录本A和B。样本1和2都与参考注释一致，在此用于合并和扩展以创建转录本A。样本3和4彼此一致，但与注释不一致，这些被合并以创建转录本B。</p>
</blockquote>
<p>在合并步骤之后，再运行一次<strong>StringTie</strong>来重新估计合并后的转录本的丰度。重新估计的步骤使用与初始步骤中使用的相同的丰度估计算法。</p>
<p>许多（不是全部）RNA-seq的用户都对发现有差异表达的基因感兴趣，而且许多人都专注于研究得很好(<em>well-studied</em>)的基因。因此，使用一种完全依赖注释的，不会去发现新的基因和新的异构体的方法（特别是对于像人类、小鼠和果蝇这样研究良好的物种），可能是很诱人的。然而，这些物种可用的标准注释文件可能遗漏了成千上万的异构体，以及许多基因。例如，最近的一项研究使用核糖体足迹分析（<em>ribosome footprint profiling</em>）验证了<strong>7273</strong>个以前未被注释的人类基因，其中大部分是研究人员在一组非常大的RNA-seq数据（28亿读数）上运行<strong>StringTie</strong>时发现的。StringTie自动检测新的基因和新的异构体，如果它们存在于你的实验数据中，不管它们是否出现在标准注释文件中，这里描述的协议可以发现影响这些基因的差异表达。</p>
<h5 id="用ballgown-进行差异性表达分析">用Ballgown 进行差异性表达分析</h5>
<p>分析、可视化和统计建模是收集和量化转录本后的下一个步骤。<strong>R编程语言</strong>和<strong>Bioconductor</strong>软件套件拥有一套全面的工具来处理从绘制(<em>plotting</em>)原始数据到归一化(<em>ormalization</em>)再到下游统计建模的任务。我们的流水线(<em>pipeline</em>)使用Ballgown软件包，它被设计为成为SAT和StringTie等上游命令行软件与<em>Bioconductor</em>社区的下游功能之间的桥梁。</p>
<p>StringTie可以产生一组链接的表格（<em>a linked set of tables</em>），可以使用Ballgown包中的函数直接读入R。在R中产生的数据包括三个表中的信息。(i) 表型数据（<em>phenotype data</em>）-关于正在收集的样本的信息；(ii) 表达数据（<em>expression data</em>）-每个样本中每个外显子、连接点、转录本和基因表达量的标准化和非标准化措施；(iii) 基因组信息（<em>genomic information</em>）-给出外显子、内含子、转录本和基因的位置的坐标，以及包括基因名称等信息的注释。</p>
<p>一旦信息被读入R会话（<em>session</em>），分析就会以交互方式进行。换句话说，R和Bioconductor中的任何包或函数都可以使用。大多数差异表达分析都是沿着这个路径进行的：(i) 数据可视化和检查，(ii) 差异表达的统计测试，(iii) 多重测试校正，(iv) 下游检查和结果总结。Ballgown为这些步骤中的每一步都提供了函数，当数据集出现特定问题（包括RNA-seq分析中通常出现的问题）时，可以与其他R命结合使用。</p>
<p>协议的<strong>Ballgown</strong>部分从向R中加载数据开始。这需要加载StringTie产生的丰度数据和描述样本的表型信息。这个过程中的一个关键步骤是确保基因组样本的标识符（ID）与表型数据的ID相匹配。如果样本似乎并不匹配，Ballgown将抛出一个错误。装入数据后，下一步是检查转录本的丰度估计分布。在这一点上，丰度估计（以<strong>FPKM</strong>值表示，即每百万映射读数中每千碱基的转录物片段）已经相对于文库大小进行了归一化处理，因此，样品之间整体分布的任何极端差异都应引起人们关于样品、排列或丰度估计出现问的担心。</p>
<p>差异表达分析采用线性模型。附在转录本上的<strong>FPKM</strong>值通常是高度倾斜（<em>skewed</em>）的。因此，为了稳定方差，Ballgown的内置函数会应用对数转换，然后拟合标准的可用于测试差异表达的线性模型。Ballgown允许进行时间序列和固定条件（<em>time-course and fixed-condition</em>）的差异表达分析。RNA-seq分析中出现的一个常见问题是没有考虑到混杂因素&ndash;诸如批次效应（<em>batch effects</em>）&ndash;这些因素与分析并无直接关系，但可能影响基因的表达水平。使用Ballgown <strong>stattest</strong>函数，你可以直接指定任何已知的混杂因素。Ballgown允许你在基因、转录本、外显子或连接点水平上进行分析。其结果是一个表格（<em>table</em>），它包含了差异性表达测试的特征信息；条件之间的折叠变化（若存在）；P值；差异性表达的q值。
这些结果可用于下游基因组分析软件的进一步挖掘，对重要的结果进行可视化检查（<em>visual inspection</em>），或将结果导出到表格中，以便共享并使用<strong>Excel</strong>等程序进行人工检查。</p>
]]></description>
</item>
<item>
  <title>使用HISAT StringTie和Ballgown进行的转录本表达水平分析（中译）(一)</title>
  <link>https://flatig.vip/posts/%E4%BD%BF%E7%94%A8hisat-stringtie%E5%92%8Cballgown%E8%BF%9B%E8%A1%8C%E7%9A%84%E8%BD%AC%E5%BD%95%E6%9C%AC%E8%A1%A8%E8%BE%BE%E6%B0%B4%E5%B9%B3%E5%88%86%E6%9E%90%E4%B8%AD%E8%AF%91%E4%B8%80/</link>
  <pubDate>Tue, 08 Mar 2022 17:04:31 &#43;0000</pubDate>
  <author>flatig</author>
  <guid>https://flatig.vip/posts/%E4%BD%BF%E7%94%A8hisat-stringtie%E5%92%8Cballgown%E8%BF%9B%E8%A1%8C%E7%9A%84%E8%BD%AC%E5%BD%95%E6%9C%AC%E8%A1%A8%E8%BE%BE%E6%B0%B4%E5%B9%B3%E5%88%86%E6%9E%90%E4%B8%AD%E8%AF%91%E4%B8%80/</guid>
  <description><![CDATA[<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">本文章基于 DeepL 进行初步翻译，后人工调整部分语法和句式以使其通顺易读。
</span></span><span class="line"><span class="cl">具有相应基础知识的读者可以阅读此篇文章以横向扩充知识：</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://www.jianshu.com/p/1f5d13cc47f8"target="_blank" rel="external nofollow noopener noreferrer">RNA-seq数据分析&mdash;方法学文章的实战练习<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
<p>作者： Mihaela Pertea1,2, Daehwan Kim1, Geo M Pertea1, Jeffrey T Leek3 &amp; Steven L Salzberg1–4</p>
<blockquote>
<p>美国马里兰州巴尔摩市约翰-霍普金斯医学院McKusick-Nathans遗传医学研究所计算生物学中心。美国马里兰州巴尔摩市约翰霍普金斯大学惠特工程学院计算机科学系。约翰霍普金斯大学彭博公共卫生学院生物统计学系。美国马里兰州巴尔的摩市约翰霍普金斯大学生物统计系。生物医学工程系，约翰霍普金斯大学，巴尔的摩，马里兰州，美国。通讯作者：S.L.S.（salzberg@jhu.edu）。</p>
</blockquote>
<blockquote>
<p>2016年8月11日在线发布于Nature; doi:10.1038/nprot.2016.095</p>
</blockquote>
<blockquote>
<p>高通量mRNA测序（RNA-seq）已经成为测量和比较各种物种和条件下的基因表达水平的标准方法。RNA-seq实验产生了非常大的、复杂的数据集，需要快速、准确和灵活的软件来将原始读数数据减少到可理解的结果。HISAT（转录本拼接排列的分层索引）、StringTie和Ballgown是免费的、开源的软件工具，用于全面分析RNA-seq实验。它们一起允许科学家将<em>reads</em>与基因组对齐，组装包括新剪接变体的转录本，计算这些转录本在每个样本中的丰度，并比较实验以确定差异表达的基因和转录本。该协议(Protocol)描述了处理大量原始测序<em>reads</em>并创建基因转录本、表达水平以及差异表达基因及转录本的清单的所有必要步骤。该协议的执行时间取决于计算资源，但通常需要不到45分钟的计算机时间。HISAT、StringTie和Ballgown可以从以下网站获得：
<a href="http://ccb.jhu.edu/software.shtml"target="_blank" rel="external nofollow noopener noreferrer">网页链接<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></p>
</blockquote>
<h3 id="介绍">介绍</h3>
<p>RNA-seq实验从一组细胞中捕获总的mRNA，然后对该RNA进行测序，以确定哪些基因在这些细胞中是活跃的，或表达的。使用高通量测序机（<em>high-throughput sequencing machines</em>），一个实验可以一次捕获数千个基因的表达水平，而且精确度很高。
这些实验产生了大量的原始测序<em>reads</em>，即使是中等规模的实验，其数量也通常在数千万以上。每个基因产生的<em>reads</em>可以作为基因丰度的衡量标准，通过适当的设计，RNA-seq可以检测哪些基因在两个或多个条件下表达水平明显不同。RNA-seq数据可以很容易地检测出未包括在标准注释（<em>standard annotation</em>）中的基因和基因变体，包括非编码RNA基因。使用适当的软件，RNA-seq也可以用来发现单一基因的不同异构体受到不同的调节和表达的条件。</p>
<p>RNA-seq实验必须用准确、高效的软件进行分析，这些软件是精心设计的，可以处理大多数实验产生的非常大的测序量。分析管道（<em>Analysis Pipeline</em>）在概念上可以分为四个<strong>主要任务</strong>：(i) 将<em>reads</em>与基因组进行比对；(ii) 将比对结果组装成全长的转录本。(iii) 对每个基因和转录本的表达水平进行定量分析；以及（iv）计算不同实验条件下所有基因的表达差异。我们中的一些人以前开发了两个软件工具，<strong>TopHat2</strong>和<strong>Cufflinks5</strong>，它们一起可以完成所有这四项任务，如在早期的协议中所述。最近，我们又开发了三个新的软件工具完成同样的任务，同时运行速度更快，使用的内存更少，提供更准确的整体结果。<strong>HISAT</strong>将RNA-seq读数与基因组进行比对，并发现转录本的剪接位点，同时运行速度远远超过<em>TopHat2</em>，所需的计算机内存也比其他方法少很多。<strong>StringTie</strong>将排列组合成完整和部分的转录本，必要时创建多种异构体（<em>isoform</em>），并估计所有基因和转录本的表达水平。<strong>Ballgown</strong>从<em>StringTie</em>中获取转录本和表达水平，并应用严格的统计方法来确定哪些转录本在两个或多个实验之间有差异表达。我们在此描述了一个使用这些工具进行RNA-seq数据分析的协议；<strong>图1</strong> 显示了该协议中使用的软件，并强调了每个工具所执行的主要步骤。所有的工具都在网上有完整的文档，并由开发者积极维护。</p>
<p><a class="lightgallery" href="https://pic.imgdb.cn/item/622727e05baa1a80ab4d3a15.png" data-thumbnail="https://pic.imgdb.cn/item/622727e05baa1a80ab4d3a15.png" data-sub-html="<h2>图1</h2>"></a></p>
<blockquote>
<p>图1｜&quot;新Tuxedo &ldquo;协议的概述。在一个涉及多个RNA-seq数据集的实验中，首先使用HISAT将<em>reads</em>映射到基因组上（步骤1和2）。参考基因和转录物的注释文件可以作为输入，但这是可选的，如虚线所示。然后将比对结果传递给StringTie（第3步），由它对每个样品中的转录本进行组装和量化。(在另一个协议中，步骤2的排列被直接传递到步骤6，跳过所有的组装步骤。第6步将只估计已知的、有注释的转录本的丰度）。初步组装后，组装好的转录物被一个特殊的StringTie模块合并在一起（第4步），它为所有的样本创建了一个统一的转录本集。StringTie可以在这两个步骤中使用注释文件，如虚线所示。然后，gffcompare程序将基因和转录本与注释进行比较，并报告这一比较的统计数据（第5步）。在第6步，StringTie处理<strong>reads</strong>排列和合并的转录本或参考注释（通过标有 &ldquo;OR &ldquo;的标签）。利用这一输入，StringTie在必要时重新估计丰度，并创建新的转录本表以输入到Ballgown。然后，Ballgown比较所有条件下的转录本，并生成差异表达的基因和转录本的表格和图（步骤7-21）。图中的黑线和蓝色弧线分别代表程序的输入和输出。可选的输入用虚线表示。</p>
</blockquote>
<h3 id="协议概述">协议概述</h3>
<p>RNA-seq实验可用于测量许多现象。为了简单起见，这里描述的协议旨在用于许多用户的设计密切对应的类似实验。我们考虑一个比较两种生物条件的实验，如病例与对照、野生型与突变型或疾病与正常的比较。对于每个条件，我们包括六个重复，注意到三个是有效统计结果的最小重复数。该软件将支持许多其他设计，包括时间过程实验（ <em>time-course experiments</em>）和两个以上条件的比较。
本协议中使用的例子数据包括人类RNA-seq样本，尽管该协议适用于任何有测序基因组（<em>sequenced genome</em>）的物种，包括小鼠、大鼠、果蝇、拟南芥、酵母和许多其他物种。(一些程序参数可能需要调整以优化内含子较小的基因组的结果）。实验产生的数据文件非常大，这也是高通量RNA-seq实验经常出现的情况；因此，为了让新手更快、更简单地使用该协议，我们提取了一个映射到人类X染色体的<em>reads</em>子集，这是一个基因相对丰富的染色体，横跨151兆字节（Mb），约占基因组的5%。该协议描述了对这些<em>reads</em>的端到端(<em>end-to-end analysis</em>)分析，但它同样适用于完整的数据集，对于这些数据集，它需要明显更多的计算时间。</p>
<p>这个协议从收集到的所有样本的原始RNA-seq <em>reads</em>开始，并产生一些有用的输出，包括每个样品的基因、转录物和表达水平的列表（<em>lists</em>），显示两种条件下差异表达的基因的表格(<em>table</em>)，以及伴随的统计学意义的测量(<em>accompanying statistical measures of significance</em>)。首先，用<strong>HISAT</strong>将每个样品的<em>reads</em>映射到参考基因组上（图1）。用户可以提供一个有注释的基因位置的文件作为选项，HISAT将使用该文件，但它也将检测注释中缺少的剪接位点(<em>splice sites</em>)。接下来，排列组合被传递给<strong>StringTie</strong>进行转录组装。<strong>StringTie</strong>分别对每个数据集的基因进行组装，在组装时估计每个基因和每个异构体的表达水平。在组装完每个样本后，全套的组装被传递给<strong>StringTie</strong>的合并功能，它将把在任何样本中发现的所有基因结构合并在一起。这一步是必要的，因为一些样本中的转录本可能只被<em>reads</em> 部分覆盖，因此在最初的<strong>StringTie</strong>运行中，它们只有部分版本被组装起来。合并步骤创建了一套在所有样本中都一致的转录本，这样转录本就可以在后续步骤中进行比较。合并后的转录本会被再一次反馈给<strong>StringTie</strong>，这样它就可以用合并后的结构重新估计转录本的丰度。重新估计使用与原始组装相同的算法，但对于转录本结构因合并步骤而改变，可能需要重新分配<em>reads</em>。<strong>StringTie</strong>还为每个转录本提供<strong>Ballgown</strong>需要的额外读数数据。最后，<strong>Ballgown从StringTie</strong>获取所有的转录本和丰度，按实验条件分组，并确定哪些基因和转录本在不同条件下有差异表达。<strong>Ballgown</strong>包括作为<em>R/Bioconductor</em>软件包一部分的绘图工具，可以帮助实现结果的可视化。</p>
<p>这个协议不需要编程的专业知识，但它确实需要熟悉<strong>Unix命令行界面</strong>和运行基本<strong>R Scripts</strong>的能力。用户需要能够适应从命令行运行程序和在Unix环境中编辑文本文件的操作。</p>
<h3 id="替代性分析包">替代性分析包</h3>
<p><em>HISAT、StringTie和Ballgown</em>提供了一个完整的分析包（&ldquo;新Tuxedo &ldquo;包），它从原始读取数据开始，为每个RNA-seq样本产生基因列表和表达水平，以及为整个实验产生差异表达基因列表。其他RNA-seq分析包已经被开发出来，可以代替这些工具，或与这些工具结合使用，最明显的是<strong>TopHat2和Cufflinks</strong>系统（最初的&rsquo;Tuxedo&rsquo;包）。对齐步骤(<em>The alignment step</em>)需要一种允许<em>reads</em>跨越内含子且不需要注释文件的拼接对齐算法，对此有几种替代工具可供选择。来自这些其他工具的对准可以作为<em>StringTie</em>的输入。对于转录组的组装和量化步骤，也已经开发出了替代方法。一些方法可以重建转录本，不使用参考基因组，这是一个可以从这个协议中考虑的另一个问题。其他RNA-seq分析程序可以通过使用注释文件的、已知的基因来量化转录本；通过跳过转录本组装步骤，这些程序具有大量的速度优势。我们注意到，即使目前的研究已经相当成熟的生物体，如人类、小鼠和果蝇，蛋白质编码基因、剪接变体和非编码RNA基因的注释也远未完成，这些替代程序不能报告任何新的转录本或剪接变体。</p>
<p>在所有样品组装完毕后，我们的方案使用<strong>StringTie</strong>来合并转录本，但也可以使用Cufflinks软件包中的<strong>cuffmerge</strong>程序来代替。
最后，已经开发了多种用于计算差异表达的工具，这些工具可以作为Ballgown的替代品。这些替代程序的输入要求各不相同，它们可能需要进行数据格式的转换，然后才能与这里的程序一起使用。这种自由选择（<em>customization</em>）超出了本协议的范围，我们建议用户遵循下面描述的协议。我们还注意到，尽管这里介绍的方案可以检<strong>测差异表达的转录本和基因</strong>，但它并不是为了检测差异外显子的使用情况，而其他几个程序（<strong>DEXseq23、rMATS24和MISO25</strong>）是专门为解决这一问题而开发的。</p>
<h3 id="软件与协议的局限性">软件与协议的局限性</h3>
<p>HISAT、StringTie和Ballgown并不是对RNA-seq数据进行基因和转录物表达分析的唯一方法，它们也不会处理所有RNA-seq实验。例如，一些RNA-seq实验可能需要对原始RNA-seq数据进行预处理，以去除污染物、适配体、低质量序列和其他假象(<em>contaminants, adaptors, low-quality sequences and other artifacts</em>)。本协议不包括这种预处理，但诸如<a href="http://hannonlab.cshl.edu/fastx_toolkit"target="_blank" rel="external nofollow noopener noreferrer">FASTX工具包<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>和<a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc"target="_blank" rel="external nofollow noopener noreferrer">FastQC<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a>等工具可以确保向初始拼接比对步骤提供高质量的数据。我们假定了RNA-seq数据是在<strong>Illumina</strong>测序仪上产生的，但如果是来自第三代序列的数据量大，错误率高的<em>reads</em>，比如来自<strong>Pacific Biosciences</strong>或牛津<strong>Nanopore</strong>的测序数据，可能需要不同的软件，尤其是在对齐步骤。</p>
<p><strong>Ballgown</strong>可以用来从几个汇编程序中加载数据。
包括<strong>StringTie、Cufflinks5和RSEM17</strong>；但其他转录组组装方法产生的输出结果与Ballgown不兼容。这些方法也主要是在转录本水平上使用，尽管<strong>Bioconductor</strong>对象允许应用任何Bioconductor包进行基因或外显子水平的分析。请注意，Ballgown的默认参数是在假设样本量不大的情况下创建的，范围从三个到几百个。然而，如果用户想以本协议所描述以外的方式应用该软件，可以对参数进行调整，以适应广泛的特定情况。</p>
]]></description>
</item>
</channel>
</rss>
